"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Chart = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = require("styled-components");

var _chart = _interopRequireDefault(require("./chart"));

var _resolveOptions = _interopRequireDefault(require("./resolveOptions"));

var _resolveDatasets = _interopRequireDefault(require("./resolveDatasets"));

var _container = _interopRequireDefault(require("./styled/container"));

var _unregisterGlobalPlugins = _interopRequireDefault(require("./helpers/unregisterGlobalPlugins"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * A chart is a graphical representation of data. Charts allow users to better understand
 * and predict current and future data. The Chart component is based on Charts.js,
 * an open source HTML5 based charting library.
 * You can learn more about it here:
 * @category DataView
 */
var Chart = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(Chart, _Component);

  var _super = _createSuper(Chart);

  function Chart(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Chart);
    _this = _super.call(this, props);
    _this.chartRef = /*#__PURE__*/_react["default"].createRef();
    _this.datasets = [];
    return _this;
  }

  (0, _createClass2["default"])(Chart, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var children = this.props.children;
      this.datasets = (0, _resolveDatasets["default"])(children);
      this.renderChart();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var children = this.props.children;
      this.datasets = (0, _resolveDatasets["default"])(children);
      this.updateChart();
    }
  }, {
    key: "updateChart",
    value: function updateChart() {
      var _this$props = this.props,
          labels = _this$props.labels,
          type = _this$props.type,
          conditions = (0, _objectWithoutProperties2["default"])(_this$props, ["labels", "type"]);
      this.chartInstance.data = {
        labels: labels,
        datasets: this.datasets
      };

      if (type && this.chartInstance.config && type !== this.chartInstance.config.type) {
        this.chartInstance.config.type = type;
      }

      this.chartInstance.options = (0, _resolveOptions["default"])(_objectSpread({
        type: type
      }, conditions));
      this.chartInstance.update();
    }
  }, {
    key: "renderChart",
    value: function renderChart() {
      (0, _unregisterGlobalPlugins["default"])(_chart["default"]);
      var _this$props2 = this.props,
          type = _this$props2.type,
          labels = _this$props2.labels,
          plugins = _this$props2.plugins,
          conditions = (0, _objectWithoutProperties2["default"])(_this$props2, ["type", "labels", "plugins"]);
      var node = this.chartRef.current;
      this.chartInstance = new _chart["default"](node, {
        type: type,
        data: {
          labels: labels,
          datasets: this.datasets
        },
        plugins: plugins || null,
        options: (0, _resolveOptions["default"])(_objectSpread({
          type: type,
          plugins: plugins
        }, conditions))
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          style = _this$props3.style,
          className = _this$props3.className;
      return /*#__PURE__*/_react["default"].createElement(_container["default"], {
        className: className,
        style: style
      }, /*#__PURE__*/_react["default"].createElement("canvas", {
        ref: this.chartRef
      }));
    }
  }]);
  return Chart;
}(_react.Component);

exports.Chart = Chart;
Chart.propTypes = {
  /** The type of chart to draw. */
  type: _propTypes["default"].oneOf(['bar', 'horizontalBar', 'line', 'radar', 'pie', 'doughnut', 'polarArea', 'bubble']),

  /** Defines the names of the sections for the corresponding values. */
  labels: _propTypes["default"].arrayOf(_propTypes["default"].string),

  /** Determines whether to show the stacked bars in a bar chart. */
  showStacked: _propTypes["default"].bool,

  /** Defines if the legend is shown. */
  showLegend: _propTypes["default"].bool,

  /** If true, do not display grid lines for x axis. */
  disableXAxisGridLines: _propTypes["default"].bool,

  /** If true, do not display grid lines for y axis. */
  disableYAxisGridLines: _propTypes["default"].bool,

  /** If true, do not draw border at the edge between the x axis and the chart area. */
  disableXAxisBorders: _propTypes["default"].bool,

  /** If true, do not draw border at the edge between the y axis and the chart area. */
  disableYAxisBorders: _propTypes["default"].bool,

  /** If true, do not show tick labels for x axis. */
  disableXAxisTickLabels: _propTypes["default"].bool,

  /** If true, do not show tick labels for y axis. */
  disableYAxisTickLabels: _propTypes["default"].bool,

  /** The position of the legend. */
  legendPosition: _propTypes["default"].oneOf(['top', 'bottom', 'right', 'left']),

  /** Determines whether it should perform animations when rendering the chart,
   * this would improve general performance
   * and is recommended for high data volumes charts. */
  disableAnimations: _propTypes["default"].bool,

  /** Determines whether to draw the lines that join the dots in a line chart,
   * is recommended for high data volumes charts. */
  disableLines: _propTypes["default"].bool,

  /** Determines whether the lines that join the dots in a
   * line chart should be curved or straight.  */
  disableCurves: _propTypes["default"].bool,

  /** Maintain the original canvas aspect ratio. */
  maintainAspectRatio: _propTypes["default"].bool,

  /** Plugins to customize the Chart. */
  plugins: _propTypes["default"].arrayOf(_propTypes["default"].object),

  /** An object with options to pass to Chart.js; Options in this object
   * will have precedence over any other option.
   * See: https://www.chartjs.org/docs/2.7.3/general/
   */
  options: _propTypes["default"].object,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied for the outer element. */
  style: _propTypes["default"].object,

  /**
   * This prop that should not be visible in the documentation.
   * @ignore
   */
  children: _propTypes["default"].node
};
Chart.defaultProps = {
  type: 'bar',
  labels: [],
  showStacked: false,
  showLegend: true,
  legendPosition: 'bottom',
  disableAnimations: false,
  disableLines: false,
  disableCurves: false,
  disableXAxisGridLines: false,
  disableYAxisGridLines: false,
  disableXAxisBorders: false,
  disableYAxisBorders: false,
  disableXAxisTickLabels: false,
  disableYAxisTickLabels: false,
  maintainAspectRatio: true,
  plugins: undefined,
  options: {},
  className: undefined,
  style: undefined,
  children: undefined
};

var _default = (0, _styledComponents.withTheme)(Chart);

exports["default"] = _default;