"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

/**
 * PageCodeInput page object class.
 * @class
 */
var PageCodeInput = /*#__PURE__*/function () {
  /**
   * Create a new PageCodeInput page object.
   * @constructor
   * @param {string} rootElement - The selector of the PageCodeInput root element.
   */
  function PageCodeInput(rootElement) {
    (0, _classCallCheck2["default"])(this, PageCodeInput);
    this.rootElement = rootElement;
  }

  (0, _createClass2["default"])(PageCodeInput, [{
    key: "type",
    value: function type(key) {
      var focusedInput = this.getFocusedInput();

      if (focusedInput) {
        focusedInput.setValue(key);
      }
    }
    /**
     * Triggers a click over the focused input
     * @method
     * @param {string} inputIndex - The index of the input
     */

  }, {
    key: "click",
    value: function click() {
      var focusedInput = this.getFocusedInput();

      if (focusedInput) {
        focusedInput.click();
      }
    }
    /**
     * Triggers a click over the input via their index (position in the input array)
     * @method
     * @param {string} inputIndex - The index of the input
     */

  }, {
    key: "clickInputAtIndex",
    value: function clickInputAtIndex(inputIndex) {
      var input = this.getInputAtIndex(inputIndex);

      if (input) {
        input.click();
      }
    }
    /**
     * Returns the index of the current input focused or -1 if not found any
     * @method
     */

  }, {
    key: "getFocusedIndex",
    value: function getFocusedIndex() {
      var focusedInput = this.getFocusedInput();

      if (focusedInput) {
        return focusedInput.index;
      }

      return undefined;
    }
    /**
     * Returns the value of the current input focused or -1 if not found any
     * @method
     */

  }, {
    key: "getFocusedValue",
    value: function getFocusedValue() {
      var focusedInput = this.getFocusedInput();

      if (focusedInput) {
        return focusedInput.getValue();
      }

      return undefined;
    }
    /**
     * Returns the value of the input via their index (position in the input array)
     * @method
     * @param {string} inputIndex - The index of the input
     */

  }, {
    key: "getInputValueAtIndex",
    value: function getInputValueAtIndex(inputIndex) {
      var input = this.getInputAtIndex(inputIndex);

      if (input) {
        return input.getValue();
      }

      return undefined;
    }
  }, {
    key: "getFocusedInput",
    value: function getFocusedInput() {
      var inputs = $(this.rootElement).$$('input');
      return inputs.filter(function (input) {
        return input.isFocused();
      }).shift();
    }
  }, {
    key: "getInputAtIndex",
    value: function getInputAtIndex(inputIndex) {
      var input = $(this.rootElement).$$('input')[inputIndex];

      if (input) {
        return input;
      }

      return undefined;
    }
  }]);
  return PageCodeInput;
}();

module.exports = PageCodeInput;