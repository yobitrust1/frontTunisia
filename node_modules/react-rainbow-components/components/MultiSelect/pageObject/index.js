"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

/**
 * MultiSelect page object class.
 * @class
 */
var PageMultiSelect = /*#__PURE__*/function () {
  /**
   * Create a new MultiSelect page object.
   * @constructor
   * @param {string} rootElement - The selector of the MultiSelect root element.
   */
  function PageMultiSelect(rootElement) {
    (0, _classCallCheck2["default"])(this, PageMultiSelect);
    this.rootElement = rootElement;
  }
  /**
   * Clicks the component
   * @method
   */


  (0, _createClass2["default"])(PageMultiSelect, [{
    key: "click",
    value: function click() {
      $(this.rootElement).$('[role="combobox"]').click();
    }
    /**
     * Clicks the label element
     * @method
     */

  }, {
    key: "clickLabel",
    value: function clickLabel() {
      $(this.rootElement).$('label').click();
    }
    /**
     * Returns true when the Add button has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasTriggerFocus",
    value: function hasTriggerFocus() {
      return $(this.rootElement).$('[role="combobox"] > button').isFocused();
    }
    /**
     * Returns true when the textbox input element has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasInputFocus",
    value: function hasInputFocus() {
      return $(this.rootElement).$('[role="textbox"]').isFocused();
    }
  }]);
  return PageMultiSelect;
}();

module.exports = PageMultiSelect;