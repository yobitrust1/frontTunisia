"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Application;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = require("styled-components");

var _context = require("./context");

var _hooks = require("../../libs/hooks");

var _rainbowLegacyStyles = _interopRequireDefault(require("./rainbowLegacyStyles"));

var _normalizeTheme = _interopRequireDefault(require("../../styles/helpers/normalizeTheme"));

/**
 * This component is used to setup the React Rainbow context for a tree.
 * Usually, this component will wrap an app's root component so that the entire
 * app will be within the configured context.
 * @category Layout
 */
function Application(props) {
  var children = props.children,
      className = props.className,
      style = props.style,
      locale = props.locale,
      theme = props.theme;
  var contextValue = {
    locale: (0, _hooks.useLocale)(locale)
  };

  var _useState = (0, _react.useState)(function () {
    return (0, _normalizeTheme["default"])(theme);
  }),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      normalizedTheme = _useState2[0],
      setTheme = _useState2[1];

  (0, _react.useEffect)(function () {
    setTheme((0, _normalizeTheme["default"])(theme));
  }, [theme]);
  return /*#__PURE__*/_react["default"].createElement(_context.Provider, {
    value: contextValue
  }, /*#__PURE__*/_react["default"].createElement(_styledComponents.ThemeProvider, {
    theme: normalizedTheme
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: className,
    style: style
  }, /*#__PURE__*/_react["default"].createElement("style", null, _rainbowLegacyStyles["default"]), children)));
}

Application.propTypes = {
  /**
   * This prop should not be visible in the documentation.
   * @ignore
   */
  children: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].node), _propTypes["default"].object]),

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The locale used by application. Defaults to browser's locale. */
  locale: _propTypes["default"].string,

  /** The application theme. */
  theme: _propTypes["default"].shape({
    rainbow: _propTypes["default"].shape({
      palette: _propTypes["default"].shape({
        brand: _propTypes["default"].string,
        success: _propTypes["default"].string,
        error: _propTypes["default"].string,
        warning: _propTypes["default"].string,
        mainBackground: _propTypes["default"].string
      })
    })
  })
};
Application.defaultProps = {
  children: [],
  className: undefined,
  style: undefined,
  locale: undefined,
  theme: {}
};