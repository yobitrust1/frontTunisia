"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Avatar;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _avatarContent = _interopRequireDefault(require("./avatarContent"));

var _AssistiveText = _interopRequireDefault(require("../AssistiveText"));

var _container = _interopRequireDefault(require("./styled/container"));

/**
 * An avatar component represents an object or entity
 */
function Avatar(props) {
  var className = props.className,
      style = props.style,
      size = props.size,
      assistiveText = props.assistiveText,
      backgroundColor = props.backgroundColor,
      rest = (0, _objectWithoutProperties2["default"])(props, ["className", "style", "size", "assistiveText", "backgroundColor"]);
  return /*#__PURE__*/_react["default"].createElement(_container["default"], {
    className: className,
    style: style,
    size: size,
    backgroundColor: backgroundColor
  }, /*#__PURE__*/_react["default"].createElement(_avatarContent["default"], (0, _extends2["default"])({}, rest, {
    assistiveText: assistiveText
  })), /*#__PURE__*/_react["default"].createElement(_AssistiveText["default"], {
    text: assistiveText
  }));
}

Avatar.propTypes = {
  /** The URL for the image.
   * It take precedence over the initials and icon. */
  src: _propTypes["default"].string,

  /** If the record name contains two words, like first and last name,
   * use the first capitalized letter of each. For records that only have a single word name,
   * use the first two letters of that word using one capital and one lower case letter. */
  initials: _propTypes["default"].string,

  /** The fallback icon to show when src and initials are not passed. */
  icon: _propTypes["default"].node,

  /** The size of the avatar. Valid values are x-small, small, medium, and large.
   * It take precedence over the icon.
   * This value defaults to medium. */
  size: _propTypes["default"].oneOf(['x-small', 'small', 'medium', 'large']),

  /** The variant of the initials. Only make sense when initials is used. */
  initialsVariant: _propTypes["default"].oneOf(['default', 'inverse']),

  /** Displays tooltip text when the mouse moves over the element. */
  title: _propTypes["default"].string,

  /** A description for assistive sreen readers. */
  assistiveText: _propTypes["default"].string,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** A valid background color to customize the avatar. */
  backgroundColor: _propTypes["default"].string
};
Avatar.defaultProps = {
  src: undefined,
  initials: undefined,
  icon: null,
  size: 'medium',
  initialsVariant: 'default',
  title: undefined,
  assistiveText: undefined,
  className: undefined,
  style: undefined,
  backgroundColor: ''
};