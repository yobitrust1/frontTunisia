"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = BadgeOverlay;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _container = _interopRequireDefault(require("./styled/container"));

var _badge = _interopRequireDefault(require("./styled/badge"));

var _utils = require("../../libs/utils");

/**
 * BadgeOverlay is used to show small numerical value or status
 * descriptors for UI elements. Normally appears in proximity to
 * notifications or user avatars with eye-catching appeal, typically
 * displaying unread messages count.
 */
function BadgeOverlay(props) {
  var className = props.className,
      style = props.style,
      value = props.value,
      overlap = props.overlap,
      children = props.children,
      variant = props.variant,
      isHidden = props.isHidden,
      position = props.position;

  if (children === null) {
    return null;
  }

  return /*#__PURE__*/_react["default"].createElement(_container["default"], {
    className: className,
    style: style,
    overlap: overlap
  }, children, /*#__PURE__*/_react["default"].createElement(_badge["default"], {
    variant: variant,
    position: position,
    overlap: overlap,
    value: value,
    isHidden: isHidden
  }, (0, _utils.getSuffixSI)(value)));
}

BadgeOverlay.propTypes = {
  /** The content rendered within the badge. If the value is not passed a dot is rendered instead of the badge. */
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /** Wrapped shape the badge should overlap. This property is used
   * to place the badge relative to the corner of the wrapped element. */
  overlap: _propTypes["default"].oneOf(['circle', 'rectangle']),

  /** Object that will have the BadgeOverlay. */
  children: _propTypes["default"].node,

  /** The variant changes the appearance of the badge. Accepted variants include brand, success, error and warning. The default value is error. */
  variant: _propTypes["default"].oneOf(['brand', 'success', 'error', 'warning']),

  /** If true, the badge will be hidden. The default value is false. */
  isHidden: _propTypes["default"].bool,

  /** Describes the position of the badge respect to container.
   * Options include top-left, top-right, bottom-left and bottom-right.
   * This value defaults to top-right. */
  position: _propTypes["default"].oneOf(['top-left', 'top-right', 'bottom-left', 'bottom-right']),

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object
};
BadgeOverlay.defaultProps = {
  value: undefined,
  overlap: 'rectangle',
  children: null,
  variant: 'error',
  isHidden: false,
  position: 'top-right',
  className: undefined,
  style: undefined
};