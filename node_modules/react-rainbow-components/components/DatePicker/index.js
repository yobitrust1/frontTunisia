"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _hooks = require("../../libs/hooks");

var _constants = require("../../libs/constants");

var _calendarIcon = _interopRequireDefault(require("./calendarIcon"));

var _useFormatDate = _interopRequireDefault(require("./hooks/useFormatDate"));

var _DatePickerModal = _interopRequireDefault(require("../DatePickerModal"));

var _styled = require("./styled");

/* eslint-disable react/no-unused-prop-types */

/**
 * The DatePicker is a component that is used to select a specific day or a range of days on a calendar. The selected day
 * is indicated by a filled circle. The current day is indicated by a different color in the font and a dot under the day.
 * @category Form
 */
var DatePicker = /*#__PURE__*/_react["default"].forwardRef(function (props, ref) {
  var _useReduxForm = (0, _hooks.useReduxForm)(props),
      value = _useReduxForm.value,
      minDate = _useReduxForm.minDate,
      maxDate = _useReduxForm.maxDate,
      placeholder = _useReduxForm.placeholder,
      onClick = _useReduxForm.onClick,
      onChange = _useReduxForm.onChange,
      onFocus = _useReduxForm.onFocus,
      onBlur = _useReduxForm.onBlur,
      label = _useReduxForm.label,
      required = _useReduxForm.required,
      style = _useReduxForm.style,
      className = _useReduxForm.className,
      formatStyle = _useReduxForm.formatStyle,
      labelAlignment = _useReduxForm.labelAlignment,
      hideLabel = _useReduxForm.hideLabel,
      name = _useReduxForm.name,
      bottomHelpText = _useReduxForm.bottomHelpText,
      isCentered = _useReduxForm.isCentered,
      error = _useReduxForm.error,
      readOnly = _useReduxForm.readOnly,
      disabled = _useReduxForm.disabled,
      tabIndex = _useReduxForm.tabIndex,
      id = _useReduxForm.id,
      locale = _useReduxForm.locale,
      variant = _useReduxForm.variant,
      selectionType = _useReduxForm.selectionType;

  var currentLocale = (0, _hooks.useLocale)(locale);
  var inputRef = (0, _react.useRef)();
  var formattedDate = (0, _useFormatDate["default"])({
    value: value,
    format: formatStyle,
    locale: currentLocale,
    selectionType: selectionType
  });

  var _useDisclosure = (0, _hooks.useDisclosure)(false),
      isOpen = _useDisclosure.isOpen,
      openModal = _useDisclosure.open,
      closeModal = _useDisclosure.close;

  var modalId = id && "".concat(id, "_modal");
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      focus: function focus() {
        inputRef.current.focus();
      },
      click: function click() {
        inputRef.current.click();
      },
      blur: function blur() {
        inputRef.current.blur();
      }
    };
  });

  var handleFocus = function handleFocus() {
    onFocus(value);
  };

  var handleBlur = function handleBlur() {
    onBlur(value);
  };

  var handleChange = (0, _react.useCallback)(function (newValue) {
    if (selectionType === 'single' || newValue.length > 1) {
      closeModal();
    }

    onChange(newValue);
  }, [closeModal, onChange, selectionType]);
  var handleClick = (0, _react.useCallback)(function (event) {
    if (!readOnly) {
      openModal();
      onClick(event);
    }
  }, [onClick, openModal, readOnly]);
  var handleKeyDown = (0, _react.useCallback)(function (_ref) {
    var keyCode = _ref.keyCode;
    var shouldOpenModal = (keyCode === _constants.ENTER_KEY || keyCode === _constants.SPACE_KEY) && !readOnly;
    if (shouldOpenModal) openModal();
  }, [openModal, readOnly]);
  return /*#__PURE__*/_react["default"].createElement(_styled.StyledContainer, {
    id: id,
    className: className,
    style: style
  }, /*#__PURE__*/_react["default"].createElement(_styled.StyledInput, {
    ref: inputRef,
    label: label,
    placeholder: placeholder,
    icon: /*#__PURE__*/_react["default"].createElement(_calendarIcon["default"], null),
    iconPosition: "right",
    required: required,
    value: formattedDate,
    onKeyDown: handleKeyDown,
    onClick: handleClick,
    onFocus: handleFocus,
    onBlur: handleBlur,
    labelAlignment: labelAlignment,
    hideLabel: hideLabel,
    name: name,
    bottomHelpText: bottomHelpText,
    isCentered: isCentered,
    error: error,
    readOnly: readOnly,
    disabled: disabled,
    tabIndex: tabIndex
  }), /*#__PURE__*/_react["default"].createElement(_DatePickerModal["default"], {
    id: modalId,
    isOpen: isOpen,
    title: formattedDate || placeholder,
    variant: variant,
    locale: currentLocale,
    selectionType: selectionType,
    minDate: minDate,
    maxDate: maxDate,
    value: value,
    onChange: handleChange,
    onRequestClose: closeModal
  }));
});

DatePicker.propTypes = {
  /** Sets the date for the DatePicker programmatically. */
  value: _propTypes["default"].oneOfType([_propTypes["default"].instanceOf(Date), _propTypes["default"].string, _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].instanceOf(Date), _propTypes["default"].string]))]),

  /** The ending of a range of valid dates. The range includes the endDate.
   * The default value is current date + 100 years. */
  maxDate: _propTypes["default"].instanceOf(Date),

  /** The beginning of a range of valid dates. The range includes the startDate.
   * The default value is current date - 100 years. */
  minDate: _propTypes["default"].instanceOf(Date),

  /**  The date format style to display in the input field.
   * Valid values are small, medium, and large. */
  formatStyle: _propTypes["default"].oneOf(['small', 'medium', 'large']),

  /** The action triggered when a value attribute changes. */
  onChange: _propTypes["default"].func,

  /** Text that is displayed when the DatePicker is empty,
   * to prompt the user for a valid entry. */
  placeholder: _propTypes["default"].string,

  /** Text label for the DatePicker. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Describes the position of the DatePicker label. Options include left, center and right.
   * This value defaults to center. */
  labelAlignment: _propTypes["default"].oneOf(['left', 'center', 'right']),

  /** A boolean to hide the DatePicker label. */
  hideLabel: _propTypes["default"].bool,

  /** Specifies that the DatePicker field must be filled out before submitting the form.
   * This value defaults to false. */
  required: _propTypes["default"].bool,

  /** The name of the DatePicker. */
  name: _propTypes["default"].string,

  /** Shows the help message below the DatePicker. */
  bottomHelpText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that the DatePicker text will be centered. This value defaults to false. */
  isCentered: _propTypes["default"].bool,

  /** Specifies that the DatePicker must be filled out before submitting the form. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that the DatePicker is read-only. This value defaults to false. */
  readOnly: _propTypes["default"].bool,

  /** Specifies that the DatePicker element should be disabled. This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** Specifies the tab order of an element (when the tab button is used for navigating). */
  tabIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /** The action triggered when the element is clicked. */
  onClick: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** The id of the outer element. */
  id: _propTypes["default"].string,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The DatePicker locale. Defaults to browser's language. */
  locale: _propTypes["default"].string,

  /** The type of the selection. It can be a single date or a range. The default value is 'single'. */
  selectionType: _propTypes["default"].oneOf(['single', 'range']),

  /** The calendar variant. Defaults to 'single' */
  variant: _propTypes["default"].oneOf(['single', 'double'])
};
DatePicker.defaultProps = {
  value: undefined,
  minDate: undefined,
  maxDate: undefined,
  formatStyle: 'medium',
  onChange: function onChange() {},
  placeholder: undefined,
  label: undefined,
  labelAlignment: 'center',
  hideLabel: false,
  required: false,
  name: undefined,
  bottomHelpText: null,
  isCentered: false,
  error: null,
  readOnly: false,
  disabled: false,
  tabIndex: undefined,
  onClick: function onClick() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  id: undefined,
  className: undefined,
  style: undefined,
  locale: undefined,
  selectionType: 'single',
  variant: 'single'
};
var _default = DatePicker;
exports["default"] = _default;