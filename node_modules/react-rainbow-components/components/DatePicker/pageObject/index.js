"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var PageCalendar = require('../../Calendar/pageObject');
/**
 * DatePicker page object class.
 * @class
 * @tutorial datepicker
 */


var PageDatePicker = /*#__PURE__*/function () {
  /**
   * Create a new PageDatePicker page object.
   * @constructor
   * @param {string} rootElement - The selector of the PageDatePicker root element.
   */
  function PageDatePicker(rootElement) {
    (0, _classCallCheck2["default"])(this, PageDatePicker);
    this.rootElement = rootElement;
    this.modalRootEl = "".concat(rootElement, "_modal");
    this.calendarRootEl = "".concat(rootElement, "_modal_calendar");
  }
  /**
   * Returns the value of the input element.
   * @method
   * @returns {string}
   */


  (0, _createClass2["default"])(PageDatePicker, [{
    key: "getValue",
    value: function getValue() {
      return $(this.rootElement).$('input[type="text"]').getValue();
    }
    /**
     * Clicks the input element.
     * @method
     */

  }, {
    key: "click",
    value: function click() {
      $(this.rootElement).$('input[type="text"]').click();
    }
    /**
     * Clicks the input label element.
     * @method
     */

  }, {
    key: "clickLabel",
    value: function clickLabel() {
      $(this.rootElement).$('label').click();
    }
    /**
     * Clicks the calendar specific day button element.
     * @method
     */

  }, {
    key: "clickDay",
    value: function clickDay(day) {
      new PageCalendar(this.calendarRootEl).clickDay(day);
    }
    /**
     * Returns true when the DatePicker modal is open, false otherwise.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isOpen",
    value: function isOpen() {
      return $(this.modalRootEl).isDisplayed() && $(this.modalRootEl).$('h1').isDisplayed() && $(this.modalRootEl).$('select').isDisplayed();
    }
    /**
     * Returns true when the DatePicker has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasFocusInput",
    value: function hasFocusInput() {
      return $(this.rootElement).$('input[type="text"]').isFocused();
    }
    /**
     * Returns the date displayed on top of the DatePicker.
     * @method
     * @returns {string}
     */

  }, {
    key: "getDate",
    value: function getDate() {
      return $(this.modalRootEl).$('h1').getText();
    }
    /**
     * Wait until the DatePicker modal is open.
     * @method
     */

  }, {
    key: "waitUntilOpen",
    value: function waitUntilOpen() {
      var _this = this;

      browser.waitUntil(function () {
        return _this.isOpen();
      });
    }
    /**
     * Wait until the DatePicker modal is closed.
     * @method
     */

  }, {
    key: "waitUntilClose",
    value: function waitUntilClose() {
      var _this2 = this;

      browser.waitUntil(function () {
        return !_this2.isOpen();
      });
    }
  }]);
  return PageDatePicker;
}();

module.exports = PageDatePicker;