"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _AssistiveText = _interopRequireDefault(require("../AssistiveText"));

var _button = _interopRequireDefault(require("./styled/button"));

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _InternalTooltip = _interopRequireDefault(require("../InternalTooltip"));

var _useDefaultTooltipConnector = _interopRequireDefault(require("../InternalTooltip/hooks/useDefaultTooltipConnector"));

/**
 * Buttons Icons provide the user with visual iconography that
 * is typically used to invoke an event or action.
 */
var ButtonIcon = /*#__PURE__*/_react["default"].forwardRef(function (props, ref) {
  var buttonRef = (0, _react.useRef)();
  var tooltipRef = (0, _react.useRef)();
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      get htmlElementRef() {
        return buttonRef;
      },

      /**
       * @deprecated Backward compatibility only. Use `htmlElementRef` instead.
       */
      get buttonRef() {
        return buttonRef;
      },

      focus: function focus() {
        buttonRef.current.focus();
      },
      click: function click() {
        buttonRef.current.click();
      },
      blur: function blur() {
        buttonRef.current.blur();
      }
    };
  });
  var title = props.title,
      type = props.type,
      disabled = props.disabled,
      tabIndex = props.tabIndex,
      onClick = props.onClick,
      focusInProps = props.onFocus,
      blurInProps = props.onBlur,
      assistiveText = props.assistiveText,
      ariaHaspopup = props.ariaHaspopup,
      ariaPressed = props.ariaPressed,
      style = props.style,
      id = props.id,
      ariaControls = props.ariaControls,
      ariaExpanded = props.ariaExpanded,
      icon = props.icon,
      form = props.form,
      onKeyDown = props.onKeyDown,
      onMouseDown = props.onMouseDown,
      mouseEnterInProps = props.onMouseEnter,
      mouseLeaveInProps = props.onMouseLeave,
      className = props.className,
      shaded = props.shaded,
      variant = props.variant,
      size = props.size,
      tooltip = props.tooltip;

  var _useDefaultTooltipCon = (0, _useDefaultTooltipConnector["default"])({
    tooltipRef: tooltipRef,
    triggerRef: function triggerRef() {
      return buttonRef;
    }
  }),
      onMouseEnter = _useDefaultTooltipCon.onMouseEnter,
      onMouseLeave = _useDefaultTooltipCon.onMouseLeave,
      onFocus = _useDefaultTooltipCon.onFocus,
      onBlur = _useDefaultTooltipCon.onBlur,
      isTooltipVisible = _useDefaultTooltipCon.isVisible;

  var handleMouseEnter = function handleMouseEnter(event) {
    onMouseEnter();
    mouseEnterInProps(event);
  };

  var handleMouseLeave = function handleMouseLeave(event) {
    onMouseLeave();
    mouseLeaveInProps(event);
  };

  var handleOnFocus = function handleOnFocus(event) {
    onFocus();
    focusInProps(event);
  };

  var handleOnBlur = function handleOnBlur(event) {
    onBlur();
    blurInProps(event);
  };

  return /*#__PURE__*/_react["default"].createElement(_button["default"], {
    onMouseDown: onMouseDown,
    "data-id": "button-icon-element",
    id: id,
    className: className,
    shaded: shaded,
    variant: variant,
    size: size,
    style: style,
    disabled: disabled,
    tabIndex: tabIndex,
    onFocus: handleOnFocus,
    onBlur: handleOnBlur,
    onClick: onClick,
    title: title,
    type: type,
    "aria-haspopup": ariaHaspopup,
    "aria-controls": ariaControls,
    "aria-expanded": ariaExpanded,
    "aria-pressed": ariaPressed,
    onKeyDown: onKeyDown,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    form: form,
    ref: buttonRef
  }, icon, /*#__PURE__*/_react["default"].createElement(_AssistiveText["default"], {
    text: assistiveText
  }), /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
    isTrue: tooltip
  }, /*#__PURE__*/_react["default"].createElement(_InternalTooltip["default"], {
    triggerElementRef: function triggerElementRef() {
      return buttonRef;
    },
    isVisible: isTooltipVisible,
    preferredPosition: "top",
    ref: tooltipRef
  }, tooltip)));
});

ButtonIcon.propTypes = {
  /** The icon to show if it is passed.
   * It must be a svg icon or a font icon. It is a required value. */
  icon: _propTypes["default"].node,

  /** The variant changes the appearance of the button. Accepted variants include
   * base, brand, success, destructive, neutral, outline-brand, border, border-filled, inverse and border-inverse.
   * This value defaults to base. */
  variant: _propTypes["default"].oneOf(['base', 'neutral', 'brand', 'outline-brand', 'destructive', 'success', 'border', 'border-filled', 'border-inverse', 'inverse']),

  /** The size of the buttonIcon. For the base variant, options include x-small, small, medium,
   * and large. For non-base variants, options include xx-small, x-small, small, and medium.
   * This value defaults to medium. */
  size: _propTypes["default"].oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),

  /** Specify true when the button has a shadow around it.
   * This value defaults to false.
   * Only border-filled, brand, and success variant can be shaded. */
  shaded: _propTypes["default"].bool,

  /** Displays tooltip text when the mouse moves over the element. */
  title: _propTypes["default"].string,

  /** Specifies the type of button. Valid values are button, reset, and submit.
   * This value defaults to button. */
  type: _propTypes["default"].oneOf(['button', 'submit', 'reset']),

  /** Specifies whether this button should be displayed in a disabled state.
   * Disabled buttons can't be clicked. This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** Specifies the tab order of an element (when the tab button is used for navigating). */
  tabIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /** Text to show when pointer is over the button */
  tooltip: _propTypes["default"].node,

  /** The action that will be run when the button is clicked. */
  onClick: _propTypes["default"].func,

  /** The action that will be run when the user presses the mouse button. */
  onMouseDown: _propTypes["default"].func,

  /** The action triggered when moving the mouse pointer into the button. */
  onMouseEnter: _propTypes["default"].func,

  /** The action triggered when moving the mouse pointer out of the button. */
  onMouseLeave: _propTypes["default"].func,

  /** The action triggered when a keyboard key is pressed. */
  onKeyDown: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** A description for assistive sreen readers. */
  assistiveText: _propTypes["default"].string,

  /** A space-separated list of element IDs that
   * this button controls the contents or presence of. */
  ariaControls: _propTypes["default"].string,

  /** Indicates whether an element the button controls is expanded or collapsed.
   * Valid values are 'true' or 'false'. */
  ariaExpanded: _propTypes["default"].bool,

  /** Indicates that the element has a popup context menu or sub-level menu. */
  ariaHaspopup: _propTypes["default"].bool,

  /** Indicates that the element has been pressed. */
  ariaPressed: _propTypes["default"].bool,

  /** It must be the id attribute of a form element that the button is associated with. */
  form: _propTypes["default"].string,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The id of the outer element. */
  id: _propTypes["default"].string
};
ButtonIcon.defaultProps = {
  icon: null,
  variant: 'base',
  size: 'medium',
  shaded: false,
  title: undefined,
  type: 'button',
  disabled: false,
  tabIndex: undefined,
  tooltip: undefined,
  onClick: function onClick() {},
  onMouseDown: function onMouseDown() {},
  onMouseEnter: function onMouseEnter() {},
  onMouseLeave: function onMouseLeave() {},
  onKeyDown: function onKeyDown() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  assistiveText: undefined,
  ariaHaspopup: undefined,
  className: undefined,
  ariaPressed: undefined,
  style: undefined,
  id: undefined,
  ariaControls: undefined,
  ariaExpanded: undefined,
  form: undefined
};
ButtonIcon.displayName = 'ButtonIcon';
var _default = ButtonIcon;
exports["default"] = _default;