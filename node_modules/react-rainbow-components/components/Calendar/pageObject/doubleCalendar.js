"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

/**
 * Calendar page object class.
 * @class
 * @tutorial calendar
 */
var PageDoubleCalendar = /*#__PURE__*/function () {
  /**
   * Create a new PageCalendar page object.
   * @constructor
   * @param {string} rootElement - The selector of the PageCalendar root element.
   */
  function PageDoubleCalendar(rootElement) {
    (0, _classCallCheck2["default"])(this, PageDoubleCalendar);
    this.rootElement = rootElement;
  }
  /**
   * Clicks the previous month button element.
   * @method
   */


  (0, _createClass2["default"])(PageDoubleCalendar, [{
    key: "clickPrevMonthButton",
    value: function clickPrevMonthButton() {
      $(this.rootElement).$$('button[data-id=button-icon-element]')[0].click();
    }
    /**
     * Clicks the next month button element.
     * @method
     */

  }, {
    key: "clickNextMonthButton",
    value: function clickNextMonthButton() {
      $(this.rootElement).$$('button[data-id=button-icon-element]')[1].click();
    }
    /**
     * Returns true when the previous month button element is disabled.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isPrevMonthButtonDisabled",
    value: function isPrevMonthButtonDisabled() {
      var buttonEl = $(this.rootElement).$$('button[data-id=button-icon-element]')[0];
      return !buttonEl.isEnabled();
    }
    /**
     * Returns true when the next month button element is disabled.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isNextMonthButtonDisabled",
    value: function isNextMonthButtonDisabled() {
      var buttonEl = $(this.rootElement).$$('button[data-id=button-icon-element]')[1];
      return !buttonEl.isEnabled();
    }
    /**
     * Returns true when the previous month button element has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isPrevMonthButtonFocused",
    value: function isPrevMonthButtonFocused() {
      var buttonEl = $(this.rootElement).$$('button[data-id=button-icon-element]')[0];
      return buttonEl.isExisting() && buttonEl.isFocused();
    }
    /**
     * Returns true when the next month button element is disabled.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isNextMonthButtonFocused",
    value: function isNextMonthButtonFocused() {
      var buttonEl = $(this.rootElement).$$('button[data-id=button-icon-element]')[1];
      return buttonEl.isExisting() && buttonEl.isFocused();
    }
    /**
     * Clicks the select year element on the left month.
     * @method
     */

  }, {
    key: "clickLeftMonthSelectYear",
    value: function clickLeftMonthSelectYear() {
      $(this.rootElement).$$('select')[0].click();
    }
    /**
     * Clicks the specific enabled day button element on the left month.
     * @method
     */

  }, {
    key: "clickLeftMonthDay",
    value: function clickLeftMonthDay(day) {
      var buttonEl = $(this.rootElement).$$('table[role=grid]')[0].$("button=".concat(day));
      if (buttonEl.isExisting()) buttonEl.click();
    }
    /**
     * Returns the text of the selected left month element.
     * @method
     * @returns {string}
     */

  }, {
    key: "getLeftSelectedMonth",
    value: function getLeftSelectedMonth() {
      return $(this.rootElement).$$('h3[data-id=month]')[0].getText();
    }
    /**
     * Returns the value of the left select year element.
     * @method
     * @returns {string}
     */

  }, {
    key: "getLeftMonthSelectedYear",
    value: function getLeftMonthSelectedYear() {
      return $(this.rootElement).$$('select')[0].getValue();
    }
    /**
     * Returns the text of the current selected day element on the left month.
     * @method
     * @returns {string}
     */

  }, {
    key: "getLeftMonthSelectedDay",
    value: function getLeftMonthSelectedDay() {
      var day = $(this.rootElement).$$('table[role=grid]')[0].$('button[data-selected=true]');
      if (day.isExisting()) return day.getText();
      return undefined;
    }
    /**
     * Set the value of the year select element
     * @method
     * @param {string}
     */

  }, {
    key: "setLeftMonthYear",
    value: function setLeftMonthYear(value) {
      $(this.rootElement).$$('select')[0].selectByVisibleText(value);
    }
    /**
     * Returns true when the specific day button element on the left month has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isLeftMonthDayFocused",
    value: function isLeftMonthDayFocused(day) {
      var buttonEl = $(this.rootElement).$$('table[role=grid]')[0].$("button=".concat(day));
      return buttonEl.isExisting() && buttonEl.isFocused();
    }
    /**
     * Returns true when the specific day element in left month is selected.
     * @method
     * @returns {string}
     */

  }, {
    key: "isLeftMonthDaySelected",
    value: function isLeftMonthDaySelected(day) {
      var buttonEl = $(this.rootElement).$$('table[role=grid]')[0].$("button=".concat(day));
      return buttonEl.isExisting() && buttonEl.getAttribute('data-selected') === 'true';
    }
    /**
     * Returns true when the year select element in left month has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isLeftYearSelectFocused",
    value: function isLeftYearSelectFocused() {
      var selectEl = $(this.rootElement).$$('select')[0];
      return selectEl.isExisting() && selectEl.isFocused();
    }
    /**
     * Clicks the select year element on the right month.
     * @method
     */

  }, {
    key: "clickRightMonthSelectYear",
    value: function clickRightMonthSelectYear() {
      $(this.rootElement).$$('select')[1].click();
    }
    /**
     * Clicks the specific enabled day button element on the right month.
     * @method
     */

  }, {
    key: "clickRightMonthDay",
    value: function clickRightMonthDay(day) {
      var buttonEl = $(this.rootElement).$$('table[role=grid]')[1].$("button=".concat(day));
      if (buttonEl.isExisting()) buttonEl.click();
    }
    /**
     * Returns the text of the selected left month element.
     * @method
     * @returns {string}
     */

  }, {
    key: "getRightSelectedMonth",
    value: function getRightSelectedMonth() {
      return $(this.rootElement).$$('h3[data-id=month]')[1].getText();
    }
    /**
     * Returns the value of the left select year element.
     * @method
     * @returns {string}
     */

  }, {
    key: "getRightMonthSelectedYear",
    value: function getRightMonthSelectedYear() {
      return $(this.rootElement).$$('select')[1].getValue();
    }
    /**
     * Returns the text of the current selected day element on the left month.
     * @method
     * @returns {string}
     */

  }, {
    key: "getRightMonthSelectedDay",
    value: function getRightMonthSelectedDay() {
      var day = $(this.rootElement).$$('table[role=grid]')[1].$('button[data-selected=true]');
      if (day.isExisting()) return day.getText();
      return undefined;
    }
    /**
     * Set the value of the right select year element
     * @method
     * @param {string}
     */

  }, {
    key: "setRightMonthYear",
    value: function setRightMonthYear(value) {
      $(this.rootElement).$$('select')[1].selectByVisibleText(value);
    }
    /**
     * Returns true when the specific day button element on the right month has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isRightMonthDayFocused",
    value: function isRightMonthDayFocused(day) {
      var buttonEl = $(this.rootElement).$$('table[role=grid]')[1].$("button=".concat(day));
      return buttonEl.isExisting() && buttonEl.isFocused();
    }
    /**
     * Returns true when the specific day element in right month is selected.
     * @method
     * @returns {string}
     */

  }, {
    key: "isRightMonthDaySelected",
    value: function isRightMonthDaySelected(day) {
      var buttonEl = $(this.rootElement).$$('table[role=grid]')[1].$("button=".concat(day));
      return buttonEl.isExisting() && buttonEl.getAttribute('data-selected') === 'true';
    }
    /**
     * Returns true when the year select element in right month has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isRightYearSelectFocused",
    value: function isRightYearSelectFocused() {
      var selectEl = $(this.rootElement).$$('select')[1];
      return selectEl.isExisting() && selectEl.isFocused();
    }
  }]);
  return PageDoubleCalendar;
}();

module.exports = PageDoubleCalendar;