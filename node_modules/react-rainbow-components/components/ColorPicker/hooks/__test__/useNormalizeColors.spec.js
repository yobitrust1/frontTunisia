"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _reactHooks = require("@testing-library/react-hooks");

var _useNormalizeColors = _interopRequireWildcard(require("../useNormalizeColors"));

describe('useNormalizeColors', function () {
  it('should return empty array', function () {
    var values = ['', null, true, 0, {}, [], ['', 'qwww']];
    values.forEach(function (value) {
      var _renderHook = (0, _reactHooks.renderHook)(function () {
        return (0, _useNormalizeColors["default"])({
          defaultColors: value
        });
      }),
          result = _renderHook.result;

      expect(result.current).toStrictEqual([]);
    });
  });
  it('should return array of valid colors', function () {
    var values = [['#5ebbff', '#42d8be', '#3be282'], ['#5ebbff', 'qwe', '#42d8be', '#3be282']];
    values.forEach(function (value) {
      var _renderHook2 = (0, _reactHooks.renderHook)(function () {
        return (0, _useNormalizeColors["default"])({
          defaultColors: value
        });
      }),
          result = _renderHook2.result;

      expect(result.current).toStrictEqual(values[0]);
    });
  });
  it('should return default colors', function () {
    var values = [null, [], ['', 'qwww']];
    values.forEach(function (value) {
      var _renderHook3 = (0, _reactHooks.renderHook)(function () {
        return (0, _useNormalizeColors["default"])({
          defaultColors: value,
          variant: 'colors-fixed'
        });
      }),
          result = _renderHook3.result;

      expect(result.current).toStrictEqual(_useNormalizeColors.defaultColors);
    });
  });
  it('should return array of valid colors when the variant is colors-fixed', function () {
    var values = [['#5ebbff', '#42d8be', '#3be282'], ['#5ebbff', 'qwe', '#42d8be', '#3be282']];
    values.forEach(function (value) {
      var _renderHook4 = (0, _reactHooks.renderHook)(function () {
        return (0, _useNormalizeColors["default"])({
          defaultColors: value,
          variant: 'colors-fixed'
        });
      }),
          result = _renderHook4.result;

      expect(result.current).toStrictEqual(values[0]);
    });
  });
});