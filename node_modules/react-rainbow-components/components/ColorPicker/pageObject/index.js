"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

/**
 * PageColorPicker page object class.
 * @class
 */
var PageColorPicker = /*#__PURE__*/function () {
  /**
   * Create a new PageColorPicker page object.
   * @constructor
   * @param {string} rootElement - The selector of the PageColorPicker root element.
   */
  function PageColorPicker(rootElement) {
    (0, _classCallCheck2["default"])(this, PageColorPicker);
    this.rootElement = rootElement;
  }
  /**
   * Return the saturation pointer button element.
   * @method
   * @returns {object}
   */


  (0, _createClass2["default"])(PageColorPicker, [{
    key: "getSaturationPointer",
    value: function getSaturationPointer() {
      return $(this.rootElement).$('button');
    }
    /**
     * Triggers a click over the saturation pointer button element.
     * @method
     */

  }, {
    key: "clickSaturation",
    value: function clickSaturation() {
      this.getSaturationPointer().click();
    }
    /**
     * Return the hue input element.
     * @method
     * @returns {object}
     */

  }, {
    key: "getHueInput",
    value: function getHueInput() {
      return $(this.rootElement).$('input[type=range]');
    }
    /**
     * Triggers a click over the hue input element.
     * @method
     */

  }, {
    key: "clickHue",
    value: function clickHue() {
      this.getHueInput().click();
    }
    /**
     * Return the hex input element.
     * @method
     * @returns {object}
     */

  }, {
    key: "getHexInput",
    value: function getHexInput() {
      return $(this.rootElement).$('input[type=text]');
    }
    /**
     * Return the rgba input element for index.
     * @method
     * @param {number} index
     * @returns {object}
     */

  }, {
    key: "getRgbaInput",
    value: function getRgbaInput(index) {
      return $(this.rootElement).$$('input[type=number]')[index];
    }
    /**
     * Return the default colors input element.
     * @method
     * @returns {object}
     */

  }, {
    key: "getDefaultColorsInput",
    value: function getDefaultColorsInput() {
      return $(this.rootElement).$('input[type=radio]');
    }
    /**
     * Returns the default colors label element.
     * @method
     * @returns {object}
     */

  }, {
    key: "getDefaultColorsLabel",
    value: function getDefaultColorsLabel() {
      var id = this.getDefaultColorsInput().getAttribute('id');
      return $(this.rootElement).$("label[for=\"".concat(id, "\"]"));
    }
    /**
     * Triggers a click over the default colors label element.
     * @method
     */

  }, {
    key: "clickDefaultColors",
    value: function clickDefaultColors() {
      this.getDefaultColorsLabel().click();
    }
    /**
     * Return hex color from hex input.
     * @method
     * @returns {string}
     */

  }, {
    key: "getColor",
    value: function getColor() {
      return this.getHexInput().getValue();
    }
    /**
     * Return hex color from hex input.
     * @method
     * @returns {string}
     */

  }, {
    key: "getAlpha",
    value: function getAlpha() {
      return this.getRgbaInput(3).getValue();
    }
    /**
     * Returns true when the saturation pointer button element has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isSaturationFocused",
    value: function isSaturationFocused() {
      var buttonEl = this.getSaturationPointer();
      return buttonEl.isExisting() && buttonEl.isFocused();
    }
    /**
     * Returns true when the hue input element has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isHueFocused",
    value: function isHueFocused() {
      var rangeEl = this.getHueInput();
      return rangeEl.isExisting() && rangeEl.isFocused();
    }
    /**
     * Returns true when the alpha input element has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isAlphaFocused",
    value: function isAlphaFocused() {
      var rangeEl = $(this.rootElement).$$('input[type=range]')[1];
      return rangeEl.isExisting() && rangeEl.isFocused();
    }
    /**
     * Returns true when the hex input element has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isHexFocused",
    value: function isHexFocused() {
      var inputEl = this.getHexInput();
      return inputEl.isExisting() && inputEl.isFocused();
    }
    /**
     * Returns true when the rgba input element has focus.
     * @method
     * * @param {number} index
     * @returns {bool}
     */

  }, {
    key: "isRgbaFocused",
    value: function isRgbaFocused() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var inputEl = this.getRgbaInput(index);
      return inputEl.isExisting() && inputEl.isFocused();
    }
    /**
     * Returns true when the default colors input element has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isDefaultColorsFocused",
    value: function isDefaultColorsFocused() {
      var inputEl = this.getDefaultColorsInput();
      return inputEl.isExisting() && inputEl.isFocused();
    }
  }]);
  return PageColorPicker;
}();

module.exports = PageColorPicker;