"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var PageCalendar = require('../../Calendar/pageObject');

var PageTimeSelect = require('./pageTimeSelect');
/**
 * DateTimePicker page object class.
 * @class
 * @tutorial datetimepicker
 */


var PageDateTimePicker = /*#__PURE__*/function () {
  /**
   * Create a new PageDateTimePicker page object.
   * @constructor
   * @param {string} rootElement - The selector of the PageDateTimePicker root element.
   */
  function PageDateTimePicker(rootElement) {
    (0, _classCallCheck2["default"])(this, PageDateTimePicker);
    this.rootElement = rootElement;
    this.modalRootEl = "".concat(rootElement, "_modal");
  }
  /**
   * Returns the selected time value.
   * @method
   * @returns {string}
   */


  (0, _createClass2["default"])(PageDateTimePicker, [{
    key: "getTimeValue",
    value: function getTimeValue() {
      return new PageTimeSelect(this.modalRootEl).getValue();
    }
    /**
     * Returns the value of the input element.
     * @method
     * @returns {string}
     */

  }, {
    key: "getValue",
    value: function getValue() {
      return $(this.rootElement).$('input[type="text"]').getValue();
    }
    /**
     * Clicks the input element.
     * @method
     */

  }, {
    key: "click",
    value: function click() {
      $(this.rootElement).$('input[type="text"]').click();
    }
    /**
     * Clicks the input label element.
     * @method
     */

  }, {
    key: "clickLabel",
    value: function clickLabel() {
      $(this.rootElement).$('label').click();
    }
    /**
     * Clicks the calendar specific day button element.
     * @method
     */

  }, {
    key: "clickDay",
    value: function clickDay(day) {
      new PageCalendar(this.modalRootEl).clickDay(day);
    }
    /**
     * Clicks the OK button element
     * @method
     */

  }, {
    key: "clickOKButton",
    value: function clickOKButton() {
      $(this.modalRootEl).$('button[id="time-picker_ok-button"]').click();
    }
    /**
     * Clicks the Cancel button element
     * @method
     */

  }, {
    key: "clickCancelButton",
    value: function clickCancelButton() {
      $(this.modalRootEl).$('button[id="time-picker_cancel-button"]').click();
    }
    /**
     * Returns true when the picker modal is open, false otherwise.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isOpen",
    value: function isOpen() {
      return $(this.modalRootEl).isDisplayed() && $(this.modalRootEl).$('button[id="time-picker_ok-button"]').isDisplayed() && $(this.modalRootEl).$('button[id="time-picker_cancel-button"]').isDisplayed();
    }
    /**
     * Wait until the modal is open.
     * @method
     */

  }, {
    key: "waitUntilOpen",
    value: function waitUntilOpen() {
      var _this = this;

      browser.waitUntil(function () {
        return _this.isOpen();
      });
    }
    /**
     * Wait until the modal is closed.
     * @method
     */

  }, {
    key: "waitUntilClose",
    value: function waitUntilClose() {
      var _this2 = this;

      browser.waitUntil(function () {
        return !_this2.isOpen();
      });
    }
  }]);
  return PageDateTimePicker;
}();

module.exports = PageDateTimePicker;