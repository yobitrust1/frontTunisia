"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _inputBase = _interopRequireDefault(require("./inputBase"));

var _inputRadio = _interopRequireDefault(require("./inputRadio"));

var _inputCheckbox = _interopRequireDefault(require("./inputCheckbox"));

var _withReduxForm = _interopRequireDefault(require("../../libs/hocs/withReduxForm"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * Text inputs are used for freeform data entry.
 * @category Form
 */
var Input = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(Input, _Component);

  var _super = _createSuper(Input);

  function Input(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Input);
    _this = _super.call(this, props);
    _this.inputRef = /*#__PURE__*/_react["default"].createRef();
    return _this;
  }
  /**
   * Sets focus on the element.
   * @public
   */


  (0, _createClass2["default"])(Input, [{
    key: "focus",
    value: function focus() {
      this.inputRef.current.focus();
    }
    /**
     * Sets click on the element.
     * @public
     */

  }, {
    key: "click",
    value: function click() {
      this.inputRef.current.click();
    }
    /**
     * Sets blur on the element.
     * @public
     */

  }, {
    key: "blur",
    value: function blur() {
      this.inputRef.current.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var type = this.props.type;

      if (type === 'radio') {
        return /*#__PURE__*/_react["default"].createElement(_inputRadio["default"], (0, _extends2["default"])({
          ref: this.inputRef
        }, this.props));
      }

      if (type === 'checkbox') {
        return /*#__PURE__*/_react["default"].createElement(_inputCheckbox["default"], (0, _extends2["default"])({
          ref: this.inputRef
        }, this.props));
      }

      return /*#__PURE__*/_react["default"].createElement(_inputBase["default"], (0, _extends2["default"])({
        ref: this.inputRef
      }, this.props));
    }
  }]);
  return Input;
}(_react.Component);

Input.propTypes = {
  /** Specifies the value of an input element. */
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].bool, _propTypes["default"].number]),

  /** The name of the input. */
  name: _propTypes["default"].string,

  /** The type of the input. This value defaults to text. */
  type: _propTypes["default"].oneOf(['text', 'password', 'datetime', 'datetime-local', 'date', 'month', 'time', 'week', 'number', 'email', 'url', 'search', 'tel', 'color', 'radio', 'checkbox']),

  /** Text label for the Input. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Describes the position of the Input label. Options include left, center and right.
   * This value defaults to center. */
  labelAlignment: _propTypes["default"].oneOf(['left', 'center', 'right']),

  /** A boolean to hide the Input label. */
  hideLabel: _propTypes["default"].bool,

  /** Text that is displayed when the field is empty, to prompt the user for a valid entry. */
  placeholder: _propTypes["default"].string,

  /** The icon to show if it is passed. It must be a svg icon or a font icon. */
  icon: _propTypes["default"].node,

  /** Describes the position of the icon with respect to body. Options include left and right.
   * This value defaults to left. */
  iconPosition: _propTypes["default"].oneOf(['left', 'right']),

  /** Specifies the minimum value allowed in the field. */
  max: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /** Specifies the maximum value allowed in the field. */
  min: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /** The maximum number of characters allowed in the field. */
  maxLength: _propTypes["default"].number,

  /** The minimum number of characters allowed in the field. */
  minLength: _propTypes["default"].number,

  /** Shows the help message below the Input. */
  bottomHelpText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that an input field must be filled out before submitting the form.
   * This value defaults to false. */
  required: _propTypes["default"].bool,

  /** Specifies the regular expression that the input's value is checked against.
   * This attribute is supported for text, search, url, tel, email, and password types. */
  pattern: _propTypes["default"].string,

  /** Specifies that an input text will be centered. This value defaults to false. */
  isCentered: _propTypes["default"].bool,

  /** Specifies that an input field must be filled out before submitting the form. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that an input element should be disabled. This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** Specifies that an input field is read-only. This value defaults to false. */
  readOnly: _propTypes["default"].bool,

  /** Specifies the tab order of an element (when the tab button is used for navigating). */
  tabIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /** The action triggered when a value attribute changes. */
  onChange: _propTypes["default"].func,

  /** The action triggered when the element is clicked. */
  onClick: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** The action triggered when a key is pressed on the element. */
  onKeyDown: _propTypes["default"].func,

  /** Set the Input to checked state when true. It is used only for input type checkbox. */
  checked: _propTypes["default"].bool,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The variant changes the appearance of the Input. Accepted variants include default,
   *shaded and bare. This value defaults to default. */
  variant: _propTypes["default"].oneOf(['default', 'shaded', 'bare']),

  /** The id of the outer element. */
  id: _propTypes["default"].string,

  /** A string indicating the type of autocomplete functionality.
   * If any, to allow on the Input.
   *
   * Values accepted by the autocomplete prop: name, organization-title, username, new-password,
   * street-address, country, cc-name, transaction-currency, language, bday, sex, url, photo,
   * tel, email and impp
   *
   * For a detailed list, go to: https://www.w3.org/TR/WCAG21/#input-purposes */
  autoComplete: _propTypes["default"].string
};
Input.defaultProps = {
  value: undefined,
  type: 'text',
  name: undefined,
  placeholder: null,
  icon: undefined,
  iconPosition: 'left',
  max: undefined,
  min: undefined,
  maxLength: undefined,
  minLength: undefined,
  bottomHelpText: null,
  required: false,
  pattern: undefined,
  isCentered: false,
  error: null,
  disabled: false,
  readOnly: false,
  onChange: function onChange() {},
  tabIndex: undefined,
  onClick: function onClick() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  onKeyDown: function onKeyDown() {},
  checked: undefined,
  className: undefined,
  style: undefined,
  variant: 'default',
  id: undefined,
  autoComplete: 'on',
  label: undefined,
  labelAlignment: 'center',
  hideLabel: false
};

var _default = (0, _withReduxForm["default"])(Input);

exports["default"] = _default;