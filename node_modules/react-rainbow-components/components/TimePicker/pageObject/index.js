"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

/* eslint-disable class-methods-use-this */
var timePickerModalId = '#time-picker_modal';
var timeInputId = '#time-picker_time-input';
/**
 * TimePicker page object class.
 * @class
 * @tutorial timePicker
 */

var PageTimePicker = /*#__PURE__*/function () {
  /**
   * Create a new TimePicker page object.
   * @constructor
   * @param {string} rootElement - The selector of the TimePicker root element.
   */
  function PageTimePicker(rootElement) {
    (0, _classCallCheck2["default"])(this, PageTimePicker);
    this.rootElement = rootElement;
  }
  /**
   * Clicks the input element.
   * @method
   */


  (0, _createClass2["default"])(PageTimePicker, [{
    key: "clickTimeInput",
    value: function clickTimeInput() {
      $(this.rootElement).$(timeInputId).$('input').click();
    }
    /**
     * Clicks the label element.
     * @method
     */

  }, {
    key: "clickLabel",
    value: function clickLabel() {
      $(this.rootElement).$('label').click();
    }
    /**
     * Clicks the up button element.
     * @method
     */

  }, {
    key: "clickUpButton",
    value: function clickUpButton() {
      $(timePickerModalId).$('button[id="time-picker_up-button"]').click();
    }
    /**
     * Clicks the down button element.
     * @method
     */

  }, {
    key: "clickDownButton",
    value: function clickDownButton() {
      $(timePickerModalId).$('button[id="time-picker_down-button"]').click();
    }
    /**
     * Clicks the cancel button element.
     * @method
     */

  }, {
    key: "clickCancelButton",
    value: function clickCancelButton() {
      $(timePickerModalId).$('button[id="time-picker_cancel-button"]').click();
    }
    /**
     * Clicks the OK button element.
     * @method
     */

  }, {
    key: "clickOkButton",
    value: function clickOkButton() {
      $(timePickerModalId).$('button[id="time-picker_ok-button"]').click();
    }
    /**
     * Returns true when the TimePicker is open.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isOpen",
    value: function isOpen() {
      return $(timePickerModalId).isDisplayed() && $(timePickerModalId).$('button[id="time-picker_cancel-button"]').isDisplayed() && $(timePickerModalId).$('button[id="time-picker_ok-button"]').isDisplayed() && $(timePickerModalId).$('button[id="time-picker_up-button"]').isDisplayed() && $(timePickerModalId).$('button[id="time-picker_down-button"]').isDisplayed() && $(timePickerModalId).$('input[data-id="minutes"]').isDisplayed() && $(timePickerModalId).$('input[data-id="hour"]').isDisplayed() && $(timePickerModalId).$('input[aria-label="am-pm selector"]').isDisplayed();
    }
    /**
     * Get the TimePicker value.
     * @method
     * @returns {string}
     */

  }, {
    key: "getTimeValue",
    value: function getTimeValue() {
      return $(this.rootElement).$(timeInputId).$('input').getValue();
    }
    /**
     * Returns true when the TimePicker has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasFocusTimeInput",
    value: function hasFocusTimeInput() {
      return $(this.rootElement).$(timeInputId).$('input').isFocused();
    }
    /**
     * Returns true when the hour input has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasFocusHourInput",
    value: function hasFocusHourInput() {
      return $(timePickerModalId).$('input[data-id="hour"]').isFocused();
    }
    /**
     * Get the hour input value.
     * @method
     * @returns {string}
     */

  }, {
    key: "getHourValue",
    value: function getHourValue() {
      return $(timePickerModalId).$('input[data-id="hour"]').getValue();
    }
    /**
     * Returns true when the minutes input has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasFocusMinutesInput",
    value: function hasFocusMinutesInput() {
      return $(timePickerModalId).$('input[data-id="minutes"]').isFocused();
    }
    /**
     * Get the minutes input value.
     * @method
     * @returns {string}
     */

  }, {
    key: "getMinutesValue",
    value: function getMinutesValue() {
      return $(timePickerModalId).$('input[data-id="minutes"]').getValue();
    }
    /**
     * Returns true when the am-pm selector has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasFocusAmPmSelect",
    value: function hasFocusAmPmSelect() {
      return $(timePickerModalId).$('fieldset[role="presentation"]').isFocused();
    }
    /**
     * Returns true when the am input is selected.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isAmSelected",
    value: function isAmSelected() {
      browser.waitUntil(function () {
        return $(timePickerModalId).$('fieldset[role="presentation"]').isFocused();
      });
      return $(timePickerModalId).$('input[value="AM"]').isSelected();
    }
    /**
     * Returns true when the pm input is selected.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isPmSelected",
    value: function isPmSelected() {
      browser.waitUntil(function () {
        return $(timePickerModalId).$('fieldset[role="presentation"]').isFocused();
      });
      return $(timePickerModalId).$('input[value="PM"]').isSelected();
    }
    /**
     * Type in the hour input element.
     * @method
     * @param {string} value - The value to type in the hour input element.
     */

  }, {
    key: "setHourValue",
    value: function setHourValue(value) {
      $(timePickerModalId).$('input[data-id="hour"]').setValue(value);
    }
    /**
     * Type in the minutes input element.
     * @method
     * @param {string} value - The value to type in the minutes input element.
     */

  }, {
    key: "setMinutesValue",
    value: function setMinutesValue(value) {
      $(timePickerModalId).$('input[data-id="minutes"]').setValue(value);
    }
    /**
     * Wait until the TimePicker is open.
     * @method
     */

  }, {
    key: "waitUntilOpen",
    value: function waitUntilOpen() {
      var _this = this;

      browser.waitUntil(function () {
        return _this.isOpen();
      });
    }
    /**
     * Wait until the TimePicker is close.
     * @method
     */

  }, {
    key: "waitUntilClose",
    value: function waitUntilClose() {
      var _this2 = this;

      browser.waitUntil(function () {
        return !_this2.isOpen();
      });
    }
  }]);
  return PageTimePicker;
}();

module.exports = PageTimePicker;