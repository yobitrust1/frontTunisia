"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _autosize = _interopRequireDefault(require("autosize"));

var _withReduxForm = _interopRequireDefault(require("../../libs/hocs/withReduxForm"));

var _utils = require("../../libs/utils");

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _label = _interopRequireDefault(require("../Input/label"));

var _container = _interopRequireDefault(require("./styled/container"));

var _textareaContainer = _interopRequireDefault(require("./styled/textareaContainer"));

var _textarea = _interopRequireDefault(require("./styled/textarea"));

var _helpText = _interopRequireDefault(require("../Input/styled/helpText"));

var _errorText = _interopRequireDefault(require("../Input/styled/errorText"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * Textarea inputs are used for freeform data entry.
 * @category Form
 */
var Textarea = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(Textarea, _Component);

  var _super = _createSuper(Textarea);

  function Textarea(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Textarea);
    _this = _super.call(this, props);
    _this.textareaRef = /*#__PURE__*/_react["default"].createRef();
    _this.textareaId = (0, _utils.uniqueId)('textarea');
    _this.inlineTextLabelId = (0, _utils.uniqueId)('inline-text-label');
    _this.errorMessageId = (0, _utils.uniqueId)('error-message');
    _this.updateFocus = _this.updateFocus.bind((0, _assertThisInitialized2["default"])(_this));
    _this.state = {
      isFocused: false
    };
    return _this;
  }

  (0, _createClass2["default"])(Textarea, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var grow = this.props.grow;

      if (grow) {
        return (0, _autosize["default"])(this.textareaRef.current);
      }

      return null;
    }
  }, {
    key: "getInlineTextLabelId",
    value: function getInlineTextLabelId() {
      var bottomHelpText = this.props.bottomHelpText;

      if (bottomHelpText) {
        return this.inlineTextLabelId;
      }

      return undefined;
    }
  }, {
    key: "getErrorMessageId",
    value: function getErrorMessageId() {
      var error = this.props.error;

      if (error) {
        return this.errorMessageId;
      }

      return undefined;
    }
    /**
     * Sets focus on the element.
     * @public
     */

  }, {
    key: "focus",
    value: function focus() {
      this.textareaRef.current.focus();
    }
    /**
     * Sets click on the element.
     * @public
     */

  }, {
    key: "click",
    value: function click() {
      this.textareaRef.current.click();
    }
    /**
     * Sets blur on the element.
     * @public
     */

  }, {
    key: "blur",
    value: function blur() {
      this.textareaRef.current.blur();
    }
  }, {
    key: "updateFocus",
    value: function updateFocus(isFocused, handler) {
      var _this2 = this;

      return function () {
        _this2.setState({
          isFocused: isFocused
        });

        handler.apply(void 0, arguments);
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          style = _this$props.style,
          className = _this$props.className,
          onChange = _this$props.onChange,
          onClick = _this$props.onClick,
          onFocus = _this$props.onFocus,
          onBlur = _this$props.onBlur,
          onPaste = _this$props.onPaste,
          value = _this$props.value,
          readOnly = _this$props.readOnly,
          label = _this$props.label,
          error = _this$props.error,
          placeholder = _this$props.placeholder,
          disabled = _this$props.disabled,
          maxLength = _this$props.maxLength,
          minLength = _this$props.minLength,
          bottomHelpText = _this$props.bottomHelpText,
          required = _this$props.required,
          rows = _this$props.rows,
          id = _this$props.id,
          labelAlignment = _this$props.labelAlignment,
          hideLabel = _this$props.hideLabel,
          name = _this$props.name,
          header = _this$props.header,
          footer = _this$props.footer,
          variant = _this$props.variant;
      var isFocused = this.state.isFocused;
      return /*#__PURE__*/_react["default"].createElement(_container["default"], {
        className: className,
        style: style,
        id: id
      }, /*#__PURE__*/_react["default"].createElement(_label["default"], {
        label: label,
        labelAlignment: labelAlignment,
        hideLabel: hideLabel,
        required: required,
        inputId: this.textareaId,
        readOnly: readOnly,
        id: this.getInlineTextLabelId()
      }), /*#__PURE__*/_react["default"].createElement(_textareaContainer["default"], {
        error: error,
        readOnly: readOnly,
        disabled: disabled,
        variant: variant,
        isFocused: isFocused
      }, /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
        isTrue: header
      }, header), /*#__PURE__*/_react["default"].createElement(_textarea["default"], {
        error: error,
        id: this.textareaId,
        name: name,
        placeholder: placeholder,
        disabled: disabled,
        required: required,
        maxLength: maxLength,
        minLength: minLength,
        onChange: onChange,
        onClick: onClick,
        onFocus: this.updateFocus(true, onFocus),
        onBlur: this.updateFocus(false, onBlur),
        onPaste: onPaste,
        readOnly: readOnly,
        rows: rows,
        value: value,
        "aria-labelledby": this.getInlineTextLabelId(),
        "aria-describedby": this.getErrorMessageId(),
        ref: this.textareaRef
      }), /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
        isTrue: footer
      }, footer)), /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
        isTrue: bottomHelpText
      }, /*#__PURE__*/_react["default"].createElement(_helpText["default"], null, bottomHelpText)), /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
        isTrue: error
      }, /*#__PURE__*/_react["default"].createElement(_errorText["default"], {
        id: this.getErrorMessageId()
      }, error)));
    }
  }]);
  return Textarea;
}(_react.Component);

Textarea.propTypes = {
  /** Text label for the Textarea. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Describes the position of the Textarea label. Options include left, center and right.
   * This value defaults to center. */
  labelAlignment: _propTypes["default"].oneOf(['left', 'center', 'right']),

  /** A boolean to hide the Textarea label */
  hideLabel: _propTypes["default"].bool,

  /** The name of the Textarea */
  name: _propTypes["default"].string,

  /** The value of the Textarea, also used as the default value during init. */
  value: _propTypes["default"].string,

  /** Text that is displayed when the field is empty, to prompt the user for a valid entry. */
  placeholder: _propTypes["default"].string,

  /** The maximum number of characters allowed in the Textarea. */
  maxLength: _propTypes["default"].number,

  /** The minimum number of characters allowed in the Textarea. */
  minLength: _propTypes["default"].number,

  /** This make to Textarea grow. This value defaults to false. */
  grow: _propTypes["default"].bool,

  /** Shows the help message below the Textarea. */
  bottomHelpText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that the textarea field must be filled out before submitting the form.
   * This value defaults to false. */
  required: _propTypes["default"].bool,

  /** Specifies that the textarea field must be filled out before submitting the form. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that the textarea element should be disabled. This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** The number of visible text lines for the control. The value by default is 3. */
  rows: _propTypes["default"].number,

  /** Specifies that the textarea field is read-only. This value defaults to false. */
  readOnly: _propTypes["default"].bool,

  /** The action triggered when a value attribute changes. */
  onChange: _propTypes["default"].func,

  /** The action triggered when the element is clicked. */
  onClick: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** Event fired when the user paste on the Textarea */
  onPaste: _propTypes["default"].func,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The variant changes the appearance of the Textarea. Accepted variants include default,
   * and shaded. This value defaults to default. */
  variant: _propTypes["default"].oneOf(['default', 'shaded']),

  /** The id of the outer element. */
  id: _propTypes["default"].string,

  /** It is what will be displayed at the top of the component. */
  header: _propTypes["default"].node,

  /** It is what will be displayed at the bottom of the component. */
  footer: _propTypes["default"].node
};
Textarea.defaultProps = {
  label: undefined,
  value: undefined,
  name: undefined,
  placeholder: null,
  maxLength: undefined,
  minLength: undefined,
  grow: false,
  bottomHelpText: null,
  required: false,
  error: null,
  disabled: false,
  rows: 3,
  readOnly: false,
  onChange: function onChange() {},
  onClick: function onClick() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  onPaste: function onPaste() {},
  className: undefined,
  style: undefined,
  variant: 'default',
  id: undefined,
  labelAlignment: 'center',
  hideLabel: false,
  header: undefined,
  footer: undefined
};

var _default = (0, _withReduxForm["default"])(Textarea);

exports["default"] = _default;