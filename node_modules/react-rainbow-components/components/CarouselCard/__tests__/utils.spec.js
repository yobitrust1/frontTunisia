"use strict";

var _utils = require("../utils");

describe('<CarouselCard/> utils', function () {
  describe('insertChildOrderly', function () {
    it('should insert the child in the right order if the item in the nodes is at middle', function () {
      var childrenRefs = [{
        ref: 'item1'
      }, {
        ref: 'item2'
      }, {
        ref: 'item4'
      }, {
        ref: 'item5'
      }];
      var nodes = ['item1', 'item2', 'item3', 'item4', 'item5'];
      var expectedNodes = [{
        ref: 'item1'
      }, {
        ref: 'item2'
      }, {
        ref: 'item3'
      }, {
        ref: 'item4'
      }, {
        ref: 'item5'
      }];
      expect((0, _utils.insertChildOrderly)(childrenRefs, {
        ref: 'item3'
      }, nodes)).toEqual(expectedNodes);
    });
    it('should insert the child in the right order if the item in the nodes is at end', function () {
      var childrenRefs = [{
        ref: 'item1'
      }, {
        ref: 'item2'
      }, {
        ref: 'item3'
      }];
      var nodes = ['item1', 'item2', 'item3', 'item4'];
      var expectedNodes = [{
        ref: 'item1'
      }, {
        ref: 'item2'
      }, {
        ref: 'item3'
      }, {
        ref: 'item4'
      }];
      expect((0, _utils.insertChildOrderly)(childrenRefs, {
        ref: 'item4'
      }, nodes)).toEqual(expectedNodes);
    });
  });
  describe('getChildTabNodes', function () {
    var elements = [{
      element: 'a',
      innerText: 'Julio'
    }, {
      element: 'a',
      innerText: 'Pepe'
    }];
    var ref = {
      querySelectorAll: jest.fn(function () {
        return elements;
      })
    };
    it('should call querySelectorAll with [role="tabpanel"]', function () {
      (0, _utils.getChildTabNodes)(ref);
      expect(ref.querySelectorAll).toHaveBeenCalledWith('[role="tabpanel"]');
    });
    it('should return the elements resolved by querySelectorAll', function () {
      expect((0, _utils.getChildTabNodes)(ref)).toEqual(elements);
    });
    it('should return an empty array if anything is passed', function () {
      expect((0, _utils.getChildTabNodes)()).toEqual([]);
    });
  });
  describe('getItemIndex', function () {
    it('should return the index in the array of the item passed', function () {
      var children = [{
        indicatorID: 'indicator-1'
      }, {
        indicatorID: 'indicator-2'
      }, {
        indicatorID: 'indicator-3'
      }];
      expect((0, _utils.getItemIndex)(children, 'indicator-2')).toBe(1);
    });
    it('should return undefined if the item passed is not in the array', function () {
      var children = [{
        indicatorID: 'indicator-1'
      }, {
        indicatorID: 'indicator-2'
      }, {
        indicatorID: 'indicator-3'
      }];
      expect((0, _utils.getItemIndex)(children, 'indicator-4')).toBe(-1);
    });
  });
  describe('getCarouselCardContainerStyles', function () {
    it('should return null if a ref is not passed', function () {
      expect((0, _utils.getCarouselCardContainerStyles)()).toBeNull();
    });
    it('should return null if ref passed does not have a parentNode', function () {
      var ref = {};
      expect((0, _utils.getCarouselCardContainerStyles)(ref)).toBeNull();
    });
    it('should return an object with a height of 100% if the parentNode the ref passed has an height set', function () {
      var ref = {
        parentNode: {
          style: {
            height: 100
          }
        }
      };
      expect((0, _utils.getCarouselCardContainerStyles)(ref)).toEqual({
        height: '100%'
      });
    });
    it('should return an object with a height of 340 if the parentNode of the ref passed does not have an height set', function () {
      var ref = {
        parentNode: {
          style: {
            height: ''
          }
        }
      };
      expect((0, _utils.getCarouselCardContainerStyles)(ref)).toEqual({
        height: 340
      });
    });
  });
});