"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = PresenceMap;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactAsyncScriptLoader = _interopRequireDefault(require("react-async-script-loader"));

var _component = _interopRequireDefault(require("./component"));

var googleMapApiUrl = 'https://maps.googleapis.com/maps/api/js';
/**
 * @category Layout
 */

function PresenceMap(props) {
  var apiKey = props.apiKey,
      rest = (0, _objectWithoutProperties2["default"])(props, ["apiKey"]); // eslint-disable-next-line react-hooks/exhaustive-deps

  var Component = (0, _react.useCallback)((0, _reactAsyncScriptLoader["default"])("".concat(googleMapApiUrl, "?key=").concat(apiKey))(_component["default"]), [apiKey]); // eslint-disable-next-line react/jsx-props-no-spreading

  return /*#__PURE__*/_react["default"].createElement(Component, rest);
}

PresenceMap.propTypes = {
  /** The application's API key. To use the Google Maps JavaScript API,
   * you must get an API Key. See https://console.cloud.google.com/google/maps-apis/overview
   * to get an API Key. */
  apiKey: _propTypes["default"].string.isRequired,

  /** An array of Markers. */
  markers: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    position: _propTypes["default"].shape({
      lat: _propTypes["default"].number,
      lng: _propTypes["default"].number
    }).isRequired,
    icon: _propTypes["default"].shape({
      path: _propTypes["default"].string.isRequired,
      fillColor: _propTypes["default"].string,
      fillOpacity: _propTypes["default"].number,
      scale: _propTypes["default"].number,
      strokeColor: _propTypes["default"].string,
      strokeOpacity: _propTypes["default"].number,
      strokeWeight: _propTypes["default"].number,
      rotation: _propTypes["default"].number
    })
  })),

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** Represent the initial resolution at which to display the map,
   * where zoom 0 corresponds to a map of the Earth fully zoomed out,
   * and larger zoom levels zoom in at a higher resolution.
   * Specify zoom level as an integer. This value defaults to 8. */
  zoom: _propTypes["default"].number,

  /** Map center point  */
  center: _propTypes["default"].oneOfType([_propTypes["default"].shape({
    lat: _propTypes["default"].number,
    lng: _propTypes["default"].number
  }), _propTypes["default"].oneOf(['auto'])]),

  /** Option to show traffic in map */
  showTraffic: _propTypes["default"].bool,

  /** Option to show transit in map */
  showTransit: _propTypes["default"].bool,

  /**
   * This prop that should not be visible in the documentation.
   * @ignore
   */
  children: _propTypes["default"].node,

  /** Map type. */
  type: _propTypes["default"].oneOf(['roadmap', 'satellite', 'hybrid', 'terrain']),
  onMarkerClick: _propTypes["default"].func
};
PresenceMap.defaultProps = {
  markers: [],
  zoom: 2,
  className: undefined,
  style: undefined,
  center: 'auto',
  showTraffic: false,
  showTransit: false,
  children: null,
  type: 'roadmap',
  onMarkerClick: function onMarkerClick() {}
};