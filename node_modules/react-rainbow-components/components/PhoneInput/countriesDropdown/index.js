"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _hooks = require("./hooks");

var _styled = require("./styled");

var _styled2 = require("../../InternalDropdown/styled");

var _countriesList = _interopRequireDefault(require("./countriesList"));

var _RenderIf = _interopRequireDefault(require("../../RenderIf"));

var _searchIcon = _interopRequireDefault(require("../../Lookup/options/styled/searchIcon"));

var _optionsContainer = _interopRequireDefault(require("../../Lookup/options/styled/optionsContainer"));

var _emptyMessage = _interopRequireDefault(require("../../Lookup/options/styled/emptyMessage"));

var CountriesDropdown = /*#__PURE__*/(0, _react.memo)(function (props) {
  var country = props.country,
      countries = props.countries,
      isOpen = props.isOpen,
      searchRef = props.searchRef,
      setFocusIndex = props.setFocusIndex,
      onCountryChange = props.onCountryChange,
      handleFocus = props.handleFocus,
      handleBlur = props.handleBlur;
  var scrollableRef = (0, _react.useRef)();

  var _useFilterCountries = (0, _hooks.useFilterCountries)(countries, country),
      _useFilterCountries2 = (0, _slicedToArray2["default"])(_useFilterCountries, 3),
      query = _useFilterCountries2[0],
      countriesFiltered = _useFilterCountries2[1],
      setQuery = _useFilterCountries2[2];

  var itemsRef = (0, _hooks.useItemsRef)(countriesFiltered.length);
  var handleCountryChange = (0, _hooks.useHandleCountryChange)(scrollableRef, onCountryChange, setQuery);
  var handleActiveChange = (0, _hooks.useKeyboardNavigation)(country, countriesFiltered, searchRef, scrollableRef, itemsRef, handleCountryChange, setFocusIndex);

  var _useScrollControls = (0, _hooks.useScrollControls)(scrollableRef),
      showScrollUp = _useScrollControls.showScrollUp,
      showScrollDown = _useScrollControls.showScrollDown,
      handleScrollUpMouseEnter = _useScrollControls.handleScrollUpMouseEnter,
      handleScrollDownouseEnter = _useScrollControls.handleScrollDownouseEnter,
      stopScroll = _useScrollControls.stopScroll;

  var listHeight = countriesFiltered.length * 45;
  return /*#__PURE__*/_react["default"].createElement(_styled.StyledDropdown, {
    isOpen: isOpen
  }, /*#__PURE__*/_react["default"].createElement(_styled.StyledSearchContainer, null, /*#__PURE__*/_react["default"].createElement(_styled.StyledSearch, {
    ref: searchRef,
    type: "text",
    value: query,
    onChange: function onChange(event) {
      return setQuery(event.target.value);
    },
    onFocus: function onFocus(event) {
      return handleFocus(event, 1);
    },
    onBlur: handleBlur
  })), /*#__PURE__*/_react["default"].createElement(_styled.StyledScrollControls, null, /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
    isTrue: showScrollUp
  }, /*#__PURE__*/_react["default"].createElement(_styled2.Arrow, {
    direction: "up",
    onMouseEnter: handleScrollUpMouseEnter,
    onMouseLeave: stopScroll
  })), /*#__PURE__*/_react["default"].createElement(_styled.StyledScrollable, {
    ref: scrollableRef
  }, /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
    isTrue: countriesFiltered.length > 0
  }, /*#__PURE__*/_react["default"].createElement(_styled.StyledUl, {
    role: "listbox",
    listHeight: listHeight
  }, /*#__PURE__*/_react["default"].createElement(_countriesList["default"], {
    countries: countriesFiltered,
    country: country,
    itemsRef: itemsRef,
    handleCountryChange: handleCountryChange,
    handleActiveChange: handleActiveChange
  }))), /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
    isTrue: countriesFiltered.length === 0
  }, /*#__PURE__*/_react["default"].createElement(_optionsContainer["default"], {
    as: "div",
    "data-id": "phone-country-empty-container"
  }, /*#__PURE__*/_react["default"].createElement(_searchIcon["default"], null), /*#__PURE__*/_react["default"].createElement(_emptyMessage["default"], null, "Our robots did not find any match for", /*#__PURE__*/_react["default"].createElement("span", null, " \"".concat(query, "\""))))))), /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
    isTrue: showScrollDown
  }, /*#__PURE__*/_react["default"].createElement(_styled2.Arrow, {
    direction: "down",
    onMouseEnter: handleScrollDownouseEnter,
    onMouseLeave: stopScroll
  })));
});
CountriesDropdown.propTypes = {
  countries: _propTypes["default"].array,
  country: _propTypes["default"].object,
  searchRef: _propTypes["default"].object,
  isOpen: _propTypes["default"].bool,
  setFocusIndex: _propTypes["default"].func,
  onCountryChange: _propTypes["default"].func,
  handleFocus: _propTypes["default"].func,
  handleBlur: _propTypes["default"].func
};
CountriesDropdown.defaultProps = {
  countries: [],
  country: undefined,
  isOpen: false,
  searchRef: undefined,
  setFocusIndex: function setFocusIndex() {},
  onCountryChange: function onCountryChange() {},
  handleFocus: function handleFocus() {},
  handleBlur: function handleBlur() {}
};
var _default = CountriesDropdown;
exports["default"] = _default;