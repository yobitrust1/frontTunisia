"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var PageLookupMenuItem = require('./menuItem');
/**
 * Lookup page object class.
 * @class
 */


var PageLookup = /*#__PURE__*/function () {
  /**
   * Create a new Lookup page object.
   * @constructor
   * @param {string} rootElement - The selector of the Lookup root element.
   */
  function PageLookup(rootElement) {
    (0, _classCallCheck2["default"])(this, PageLookup);
    this.rootElement = rootElement;
  }
  /**
   * Clicks the input element.
   * @method
   */


  (0, _createClass2["default"])(PageLookup, [{
    key: "click",
    value: function click() {
      $(this.rootElement).$('input[type="search"]').click();
    }
    /**
     * Clicks the close button element.
     * @method
     */

  }, {
    key: "clickCloseButton",
    value: function clickCloseButton() {
      $(this.rootElement).$('button[title="close"]').click();
    }
    /**
     * Clicks the input with a selected option.
     * @method
     */

  }, {
    key: "clickSelectedOptionInput",
    value: function clickSelectedOptionInput() {
      $(this.rootElement).$('input[type="text"]').click();
    }
    /**
     * Clicks the lookup label
     * @method
     */

  }, {
    key: "clickLabel",
    value: function clickLabel() {
      $(this.rootElement).$('label').click();
    }
    /**
     * Clicks the remove selected option button.
     * @method
     */

  }, {
    key: "clickRemoveSelectedOptionButton",
    value: function clickRemoveSelectedOptionButton() {
      $(this.rootElement).$('button[title="Remove selected option"]').click();
    }
    /**
     * Returns true when the input element has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasFocusInput",
    value: function hasFocusInput() {
      return $(this.rootElement).$('input[type="search"]').isFocused();
    }
    /**
     * Returns true when the selected option input element has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasFocusSelectedOptionInput",
    value: function hasFocusSelectedOptionInput() {
      return $(this.rootElement).$('input[type="text"]').isFocused();
    }
    /**
     * Returns true when the remove selected option button has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasFocusRemoveSelectedOptionButton",
    value: function hasFocusRemoveSelectedOptionButton() {
      return $(this.rootElement).$('button[title="Remove selected option"]').isFocused();
    }
    /**
     * Type in the input element.
     * @method
     * @param {string} value - The value to type in the input element.
     */

  }, {
    key: "setQuery",
    value: function setQuery(value) {
      $(this.rootElement).$('input[type="search"]').setValue(value);
    }
    /**
     * Clear the input element.
     * @method
     */

  }, {
    key: "clearQuery",
    value: function clearQuery() {
      $(this.rootElement).$('input[type="search"]').clearValue();
    }
    /**
     * Get the value typed in the input element.
     * @method
     * @returns {string}
     */

  }, {
    key: "getQuery",
    value: function getQuery() {
      return $(this.rootElement).$('input[type="search"]').getValue();
    }
    /**
     * Get the number of matched options.
     * @method
     * @returns {number}
     */

  }, {
    key: "getOptionsLength",
    value: function getOptionsLength() {
      return $(this.rootElement).$$('li[role="presentation"]').length;
    }
    /**
     * Returns a new LookupMenuItem page object of the element in item position.
     * @method
     * @param {number} itemPosition - The base 0 index of the LookupMenuItem.
     */

  }, {
    key: "getOption",
    value: function getOption(itemPosition) {
      var items = $(this.rootElement).$$('li[role="presentation"]');

      if (items[itemPosition]) {
        return new PageLookupMenuItem(items[itemPosition]);
      }

      return null;
    }
    /**
     * Get the label of the selected option.
     * @method
     * @returns {string}
     */

  }, {
    key: "getSelectedOptionLabel",
    value: function getSelectedOptionLabel() {
      var content = $(this.rootElement).$('input[type="text"]');

      if (content) {
        return content.getValue();
      }

      return '';
    }
    /**
     * Returns true when the options menu is open, false otherwise.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isMenuOpen",
    value: function isMenuOpen() {
      return $(this.rootElement).$('[role="listbox"]').isDisplayed();
    }
    /**
     * Returns true when the empty message is displayed, false otherwise.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isMenuEmpty",
    value: function isMenuEmpty() {
      return $(this.rootElement).$('[data-id="lookup-options-empty-container"]').isDisplayed();
    }
    /**
     * Wait until the options menu is open.
     * @method
     */

  }, {
    key: "waitUntilOpen",
    value: function waitUntilOpen() {
      var _this = this;

      browser.waitUntil(function () {
        return _this.isMenuOpen();
      });
    }
    /**
     * It moves the pointer over the menu scroll up arrow
     * @method
     */

  }, {
    key: "hoverScrollUpArrow",
    value: function hoverScrollUpArrow() {
      var upArrow = $(this.rootElement).$('[data-id=lookup-arrow-button-up]');
      upArrow.scrollIntoView();
      return upArrow.moveTo();
    }
    /**
     * It moves the pointer out of the menu scroll up arrow
     * @method
     */

  }, {
    key: "mouseLeaveScrollUpArrow",
    value: function mouseLeaveScrollUpArrow() {
      return $(this.rootElement).$('input[type="text"]').moveTo();
    }
    /**
     * It moves the pointer over the menu scroll down arrow
     * @method
     */

  }, {
    key: "hoverScrollDownArrow",
    value: function hoverScrollDownArrow() {
      var downArrow = $(this.rootElement).$('[data-id=lookup-arrow-button-down]');
      downArrow.scrollIntoView();
      return downArrow.moveTo();
    }
    /**
     * It moves the pointer out of the menu scroll down arrow
     * @method
     */

  }, {
    key: "mouseLeaveScrollDownArrow",
    value: function mouseLeaveScrollDownArrow() {
      return $(this.rootElement).$('input[type="text"]').moveTo();
    }
    /**
     * Returns true when the the arrow to scroll down exits, false otherwise.
     * @method
     * @returns {bool}
     */

  }, {
    key: "arrowDownExists",
    value: function arrowDownExists() {
      return $(this.rootElement).$('[data-id="lookup-arrow-button-down"]').isExisting();
    }
    /**
     * Returns true when the the arrow to scroll down exits, false otherwise.
     * @method
     * @returns {bool}
     */

  }, {
    key: "arrowUpExists",
    value: function arrowUpExists() {
      return $(this.rootElement).$('[data-id="lookup-arrow-button-up"]').isExisting();
    }
  }]);
  return PageLookup;
}();

module.exports = PageLookup;