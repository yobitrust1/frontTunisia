"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

/**
 * LookupMenuItem page object class.
 * @class
 */
var PageLookupMenuItem = /*#__PURE__*/function () {
  /**
   * Create a new LookupMenuItem page object.
   * @constructor
   * @param {string} rootElement - The selector of the LookupMenuItem root element.
   */
  function PageLookupMenuItem(rootElement) {
    (0, _classCallCheck2["default"])(this, PageLookupMenuItem);
    this.rootElement = rootElement;
  }
  /**
   * Clicks the menu item.
   * @method
   */


  (0, _createClass2["default"])(PageLookupMenuItem, [{
    key: "click",
    value: function click() {
      this.rootElement.click();
    }
    /**
     * It moves the pointer over the menu item.
     * @method
     */

  }, {
    key: "hover",
    value: function hover() {
      var itemElement = this.rootElement.$('div[role="option"]');
      itemElement.scrollIntoView();
      itemElement.moveTo();
    }
    /**
     * Returns true when the menu item is active.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isActive",
    value: function isActive() {
      return this.rootElement.$('[role="option"]').getAttribute('aria-selected') === 'true';
    }
    /**
     * Returns true when the menu item is visible inside the menu container.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isVisible",
    value: function isVisible() {
      return this.rootElement.isDisplayedInViewport();
    }
    /**
     *  Wait until the option is visible.
     * @method
     */

  }, {
    key: "waitUntilIsVisible",
    value: function waitUntilIsVisible() {
      var _this = this;

      browser.waitUntil(function () {
        return _this.isVisible();
      });
    }
  }]);
  return PageLookupMenuItem;
}();

module.exports = PageLookupMenuItem;