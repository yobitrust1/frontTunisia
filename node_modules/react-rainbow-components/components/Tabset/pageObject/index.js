"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var PageTab = require('../../Tab/pageObject');

var BUTTON_SELECTOR = '[data-id="button-icon-element"]';
/**
 * Tabset page object class.
 * @class
 */

var PageTabset = /*#__PURE__*/function () {
  /**
   * Create a new Tabset page object.
   * @constructor
   * @param {string} rootElement - The selector of the Tabset root element.
   */
  function PageTabset(rootElement) {
    (0, _classCallCheck2["default"])(this, PageTabset);
    this.rootElement = rootElement;
  }
  /**
   * Returns a new Tab page object of the element in item position.
   * @method
   * @param {number} itemPosition - The base 0 index of the tab item.
   */


  (0, _createClass2["default"])(PageTabset, [{
    key: "getItem",
    value: function getItem(itemPosition) {
      var items = $(this.rootElement).$$('li[role="presentation"]');

      if (items[itemPosition]) {
        return new PageTab("".concat(this.rootElement, " li[role=\"presentation\"]:nth-child(").concat(itemPosition + 1, ")"));
      }

      return null;
    }
    /**
     * Returns true when buttons are visible.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isButtonsVisible",
    value: function isButtonsVisible() {
      var buttons = $(this.rootElement).$$(BUTTON_SELECTOR);

      if (buttons && buttons.length) {
        return browser.waitUntil(function () {
          return buttons[0].isDisplayed() && buttons[1].isDisplayed();
        });
      }

      return false;
    }
    /**
     * Returns true when the left button is enabled.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isLeftButtonEnabled",
    value: function isLeftButtonEnabled() {
      return $(this.rootElement).$$(BUTTON_SELECTOR)[0].isEnabled();
    }
    /**
     * Returns true when the right button is enabled.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isRightButtonEnabled",
    value: function isRightButtonEnabled() {
      return $(this.rootElement).$$(BUTTON_SELECTOR)[1].isEnabled();
    }
    /**
     * Click the left button.
     * @method
     * @returns {bool}
     */

  }, {
    key: "clickLeftButton",
    value: function clickLeftButton() {
      return $(this.rootElement).$$(BUTTON_SELECTOR)[0].click();
    }
    /**
     * Click the right button.
     * @method
     * @returns {bool}
     */

  }, {
    key: "clickRightButton",
    value: function clickRightButton() {
      return $(this.rootElement).$$(BUTTON_SELECTOR)[1].click();
    }
  }]);
  return PageTabset;
}();

module.exports = PageTabset;