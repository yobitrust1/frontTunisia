"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Component = exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactAsyncScriptLoader = _interopRequireDefault(require("react-async-script-loader"));

var _withReduxForm = _interopRequireDefault(require("../../libs/hocs/withReduxForm"));

var _hooks = require("../../libs/hooks");

var _helpers = require("./helpers");

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _label = _interopRequireDefault(require("../Input/label"));

var _helpText = _interopRequireDefault(require("../Input/styled/helpText"));

var _errorText = _interopRequireDefault(require("../Input/styled/errorText"));

var _container = _interopRequireDefault(require("./styled/container"));

var _cardInput = _interopRequireDefault(require("./styled/cardInput"));

/**
 * Stripe Card Input component are used for freeform data entry.
 * @category Form
 */
var StripeCardInput = /*#__PURE__*/_react["default"].forwardRef(function (props, ref) {
  var apiKey = props.apiKey,
      label = props.label,
      labelAlignment = props.labelAlignment,
      hideLabel = props.hideLabel,
      bottomHelpText = props.bottomHelpText,
      error = props.error,
      disabled = props.disabled,
      required = props.required,
      locale = props.locale,
      onChange = props.onChange,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      className = props.className,
      style = props.style,
      isScriptLoaded = props.isScriptLoaded,
      isScriptLoadSucceed = props.isScriptLoadSucceed;

  var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      stripe = _useState2[0],
      setStripe = _useState2[1];

  var cardRef = (0, _react.useRef)();
  var stripeCardInputId = (0, _hooks.useUniqueIdentifier)('stripe-card-input');
  var errorMessageId = (0, _hooks.useUniqueIdentifier)('error-message');
  var theme = (0, _hooks.useTheme)().rainbow;
  var cardElementOptions = (0, _react.useMemo)(function () {
    return (0, _helpers.getCardElementOptions)(theme, disabled);
  }, [disabled, theme]);
  var localeStripe = (0, _hooks.useLocale)(locale);
  var elementsOptions = (0, _react.useMemo)(function () {
    return (0, _helpers.getElementsOptions)(localeStripe);
  }, [localeStripe]);
  (0, _react.useEffect)(function () {
    if (isScriptLoaded && isScriptLoadSucceed && window.Stripe && apiKey) {
      setStripe(window.Stripe(apiKey));
    }
  }, [apiKey, isScriptLoadSucceed, isScriptLoaded]); // eslint-disable-next-line consistent-return

  (0, _react.useEffect)(function () {
    if (stripe) {
      var cardNode = cardRef.current;
      var elements = stripe.elements(elementsOptions);
      var card = elements.create('card', cardElementOptions);
      card.mount(cardNode);
      card.on('change', function (event) {
        var stripeCardEvent = {
          stripe: stripe,
          card: card,
          isEmpty: event.empty,
          isComplete: event.complete,
          cardBrand: event.brand,
          error: (0, _helpers.getError)(event.error)
        };
        onChange(stripeCardEvent);
      });
      card.on('focus', onFocus);
      card.on('blur', onBlur);
      return function () {
        card.unmount();
        card.destroy();
      };
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [cardElementOptions, elementsOptions, stripe]);
  return /*#__PURE__*/_react["default"].createElement(_container["default"], {
    ref: ref,
    className: className,
    style: style,
    disabled: disabled,
    error: error
  }, /*#__PURE__*/_react["default"].createElement(_label["default"], {
    label: label,
    hideLabel: hideLabel,
    labelAlignment: labelAlignment,
    inputId: stripeCardInputId,
    required: required
  }), /*#__PURE__*/_react["default"].createElement(_cardInput["default"], {
    ref: cardRef,
    id: stripeCardInputId,
    disabled: disabled
  }), /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
    isTrue: bottomHelpText
  }, /*#__PURE__*/_react["default"].createElement(_helpText["default"], {
    alignSelf: "center"
  }, bottomHelpText)), /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
    isTrue: error
  }, /*#__PURE__*/_react["default"].createElement(_errorText["default"], {
    id: errorMessageId,
    alignSelf: "center"
  }, error)));
});

exports.Component = StripeCardInput;
StripeCardInput.propTypes = {
  /** The application's API key. To use Stripe,
   * you must get an API Key. See https://dashboard.stripe.com/account/apikeys
   * to get an API Key. */
  apiKey: _propTypes["default"].string.isRequired,

  /** Text label for the component. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Describes the position of the StripeCardInput label. Options include left, center and right.
   * This value defaults to center. */
  labelAlignment: _propTypes["default"].oneOf(['left', 'center', 'right']),

  /** A boolean to hide the StripeCardInput label. */
  hideLabel: _propTypes["default"].bool,

  /** Shows the help message below the input. */
  bottomHelpText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that an input field must be filled out before submitting the form. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that an input element should be disabled. This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** Specifies that an input field must be filled out before submitting the form.
   * This value defaults to false. */
  required: _propTypes["default"].bool,

  /** The component locale. If the locale is not passed, it defaults to the context language, and if the context language is not passed, it will default to the browser's language. */
  locale: _propTypes["default"].oneOf(['ar', 'da', 'de', 'en', 'es', 'fi', 'fr', 'he', 'it', 'ja', 'lt', 'lv', 'ms', 'nb', 'nl', 'pl', 'pt', 'pt-BR', 'ru', 'sv', 'zh']),

  /** The action triggered when some value of the component changes. */
  onChange: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /**
   * This prop that should not be visible in the documentation.
   * @ignore
   */
  isScriptLoaded: _propTypes["default"].bool.isRequired,

  /**
   * This prop that should not be visible in the documentation.
   * @ignore
   */
  isScriptLoadSucceed: _propTypes["default"].bool.isRequired
};
StripeCardInput.defaultProps = {
  label: undefined,
  labelAlignment: 'center',
  hideLabel: false,
  bottomHelpText: null,
  error: null,
  disabled: false,
  required: false,
  locale: undefined,
  onChange: function onChange() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  className: undefined,
  style: undefined
};

var _default = (0, _reactAsyncScriptLoader["default"])('https://js.stripe.com/v3')((0, _withReduxForm["default"])(StripeCardInput));

exports["default"] = _default;