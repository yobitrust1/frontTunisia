"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = HelpText;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _hooks = require("../../libs/hooks");

var _InternalOverlay = _interopRequireDefault(require("../InternalOverlay"));

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _AssistiveText = _interopRequireDefault(require("../AssistiveText"));

var _constants = require("../../libs/constants");

var _styled = require("./styled");

var _icons = require("./icons");

var iconMap = {
  question: _icons.QuestionIcon,
  info: _icons.InfoIcon,
  error: _icons.ErrorIcon,
  warning: _icons.WarningIcon
};
var inverseIconMap = {
  question: /*#__PURE__*/_react["default"].createElement(_icons.QuestionInverseIcon, null),
  info: /*#__PURE__*/_react["default"].createElement(_icons.InfoInverseIcon, null),
  error: /*#__PURE__*/_react["default"].createElement(_icons.ErrorInverseIcon, null),
  warning: /*#__PURE__*/_react["default"].createElement(_icons.WarningInverseIcon, null)
};
/**
 * HelpText is a popup that displays information related to an element.
 */

function HelpText(props) {
  var id = props.id,
      title = props.title,
      text = props.text,
      variant = props.variant,
      tabIndex = props.tabIndex,
      className = props.className,
      style = props.style;
  var triggerRef = (0, _react.useRef)();
  var helpTextId = (0, _hooks.useUniqueIdentifier)('help-text');

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isFocused = _useState2[0],
      setIsFocused = _useState2[1];

  var isHoverTooltip = (0, _react.useRef)(false);
  var isClickTooltip = (0, _react.useRef)(false);

  var _useDisclosure = (0, _hooks.useDisclosure)(false),
      isOpen = _useDisclosure.isOpen,
      openOverlay = _useDisclosure.open,
      closeOverlay = _useDisclosure.close;

  (0, _react.useEffect)(function () {
    if (isFocused) {
      openOverlay();
    } else {
      closeOverlay();
    }
  }, [closeOverlay, isFocused, openOverlay]);
  (0, _hooks.useWindowResize)(function () {
    return closeOverlay();
  }, isOpen);

  var handleBlur = function handleBlur() {
    if (!isClickTooltip.current) {
      setIsFocused(false);
    }
  };

  var handleButtonMouseLeave = function handleButtonMouseLeave() {
    if (!isFocused) {
      setTimeout(function () {
        if (!isHoverTooltip.current) closeOverlay();
      }, 50);
    }
  };

  var handleTooltipMouseDown = function handleTooltipMouseDown() {
    isClickTooltip.current = true;
  };

  var handleTooltipMouseUp = function handleTooltipMouseUp() {
    isClickTooltip.current = false;
    triggerRef.current.focus();
  };

  var handleTooltipMouseEnter = function handleTooltipMouseEnter() {
    isHoverTooltip.current = true;
  };

  var handleTooltipMouseLeave = function handleTooltipMouseLeave() {
    isHoverTooltip.current = false;

    if (!isFocused) {
      closeOverlay();
    }
  };

  var handleKeyPressed = function handleKeyPressed(event) {
    if (event.keyCode === _constants.ESCAPE_KEY) {
      event.preventDefault();
      closeOverlay();
    }
  };

  var Icon = iconMap[variant] || iconMap.info;
  var inverseIcon = inverseIconMap[variant] || inverseIconMap.info;
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_styled.StyledButton, {
    id: id,
    className: className,
    style: style,
    ref: triggerRef,
    onMouseEnter: openOverlay,
    onMouseLeave: handleButtonMouseLeave,
    onFocus: function onFocus() {
      return setIsFocused(true);
    },
    onBlur: handleBlur,
    onKeyDown: handleKeyPressed,
    type: "button",
    tabIndex: tabIndex,
    ariaLabelledby: helpTextId,
    variant: variant
  }, /*#__PURE__*/_react["default"].createElement(Icon, {
    isFocused: isFocused
  }), /*#__PURE__*/_react["default"].createElement(_AssistiveText["default"], {
    text: variant
  })), /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
    isTrue: text
  }, /*#__PURE__*/_react["default"].createElement(_InternalOverlay["default"], {
    isVisible: isOpen,
    render: function render() {
      return /*#__PURE__*/_react["default"].createElement(_styled.StyledTooltip, {
        id: helpTextId,
        role: "tooltip",
        onMouseDown: handleTooltipMouseDown,
        onMouseUp: handleTooltipMouseUp,
        onMouseEnter: handleTooltipMouseEnter,
        onMouseLeave: handleTooltipMouseLeave
      }, /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
        isTrue: title
      }, /*#__PURE__*/_react["default"].createElement(_styled.StyledTitle, {
        variant: variant
      }, /*#__PURE__*/_react["default"].createElement(_styled.StyledIconContainer, null, inverseIcon), title)), /*#__PURE__*/_react["default"].createElement(_styled.StyledText, null, text));
    },
    triggerElementRef: triggerRef
  })));
}

HelpText.propTypes = {
  /** The id of the outer element. */
  id: _propTypes["default"].string,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** Displayed the title of component. */
  title: _propTypes["default"].string,

  /** Displayed the help message */
  text: _propTypes["default"].node,

  /** The variant changes the appearance of the button. Accepted variants include question, info, error and warning */
  variant: _propTypes["default"].oneOf(['question', 'info', 'error', 'warning']),

  /** Specifies the tab order of an element (when the tab button is used for navigating). */
  tabIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string])
};
HelpText.defaultProps = {
  id: undefined,
  className: undefined,
  style: undefined,
  title: undefined,
  text: undefined,
  variant: 'info',
  tabIndex: undefined
};