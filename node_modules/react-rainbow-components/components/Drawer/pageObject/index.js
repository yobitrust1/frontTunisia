"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

/* eslint-disable id-length */

/**
 * Drawer page object class.
 * @class
 * @tutorial drawer
 */
function getPointOutsideDrawer(drawerPosition, drawerSize) {
  var x = drawerPosition.x > 0 ? drawerPosition.x - 2 : drawerSize.width + 2;
  var y = Math.round(drawerSize.height / 2);
  return {
    x: x,
    y: y
  };
}

var PageDrawer = /*#__PURE__*/function () {
  /**
   * Create a new PageDrawer page object.
   * @constructor
   * @param {string} rootElement - The selector of the PageDrawer root element.
   */
  function PageDrawer(rootElement) {
    (0, _classCallCheck2["default"])(this, PageDrawer);
    this.rootElement = rootElement;
  }
  /**
   * Clicks the close button element.
   * @method
   */


  (0, _createClass2["default"])(PageDrawer, [{
    key: "clickCloseButton",
    value: function clickCloseButton() {
      $(this.rootElement).$('[id="drawer-close-button"]').click();
    }
    /**
     * Clicks the drawer's backdrop element.
     * @method
     */

  }, {
    key: "clickBackDrop",
    value: function clickBackDrop() {
      $(this.rootElement).$('[id="drawer-close-button"]').waitForDisplayed();
      var section = $(this.rootElement).$('section[role="dialog"]');

      var _getPointOutsideDrawe = getPointOutsideDrawer(section.getLocation(), section.getSize()),
          x = _getPointOutsideDrawe.x,
          y = _getPointOutsideDrawe.y;

      $(this.rootElement).$('[id="drawer-close-button"]').click({
        x: x,
        y: y
      });
    }
    /**
     * Returns true when the drawer is open, false otherwise.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isOpen",
    value: function isOpen() {
      return $(this.rootElement).isExisting() && $(this.rootElement).$('section[role="dialog"]').isDisplayed() && $(this.rootElement).$('[id="drawer-close-button"]').isDisplayed();
    }
    /**
     * Returns true when the closeButton has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasFocusCloseButton",
    value: function hasFocusCloseButton() {
      return $(this.rootElement).$('[id="drawer-close-button"]').isFocused();
    }
    /**
     * Wait until the open transition has finished.
     * @method
     */

  }, {
    key: "waitUntilOpen",
    value: function waitUntilOpen() {
      var _this = this;

      browser.pause(1000);
      browser.waitUntil(function () {
        return _this.isOpen();
      });
    }
    /**
     * Wait until the close transition has finished.
     * @method
     */

  }, {
    key: "waitUntilClose",
    value: function waitUntilClose() {
      var _this2 = this;

      browser.pause(1000);
      browser.waitUntil(function () {
        return !$(_this2.rootElement).isExisting();
      });
    }
  }]);
  return PageDrawer;
}();

module.exports = PageDrawer;