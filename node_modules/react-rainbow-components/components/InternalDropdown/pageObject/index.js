"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var PageOption = require('../../Option/pageObject');

var privateGetMenuBoundsRect = Symbol('privateGetMenuBoundsRect');
/**
 * InternalDropdown page object class.
 * @class
 */

var PageInternalDropdown = /*#__PURE__*/function () {
  /**
   * Create a new PageInternalDropdown page object.
   * @constructor
   * @param {string} rootElement - The selector of the PageInternalDropdown root element.
   */
  function PageInternalDropdown(rootElement) {
    (0, _classCallCheck2["default"])(this, PageInternalDropdown);
    this.rootElement = rootElement;
  }
  /**
   * It moves the pointer over the menu scroll up arrow
   * @method
   */


  (0, _createClass2["default"])(PageInternalDropdown, [{
    key: "hoverScrollUpArrow",
    value: function hoverScrollUpArrow() {
      var upArrow = $(this.rootElement).$('[data-id="internal-dropdown-arrow-up"]');
      upArrow.scrollIntoView();
      return upArrow.moveTo();
    }
    /**
     * It moves the pointer over the menu scroll down arrow
     * @method
     */

  }, {
    key: "hoverScrollDownArrow",
    value: function hoverScrollDownArrow() {
      var downArrow = $(this.rootElement).$('[data-id="internal-dropdown-arrow-down"]');
      downArrow.scrollIntoView();
      return downArrow.moveTo();
    }
    /**
     * Get the number of registered options.
     * @method
     * @returns {number}
     */

  }, {
    key: "getOptionsLength",
    value: function getOptionsLength() {
      return $(this.rootElement).$$('li[data-selected="false"]').length;
    }
    /**
     * Returns a new Option page object of the element in item position.
     * @method
     * @param {number} optionIndex - The base 0 index of the Option.
     */

  }, {
    key: "getOption",
    value: function getOption(optionIndex) {
      var activeOptions = $(this.rootElement).$$('li[data-selected="false"]');
      var option = activeOptions[optionIndex];

      if (option && !option.error) {
        return new PageOption(option, this[privateGetMenuBoundsRect]());
      }

      return null;
    }
    /**
     * Returns the boundaries of Picklist dropdown menu.
     * @method
     * @returns {object}
     */

  }, {
    key: privateGetMenuBoundsRect,
    value: function value() {
      var menu = $(this.rootElement); // eslint-disable-next-line id-length

      var _menu$getLocation = menu.getLocation(),
          x = _menu$getLocation.x,
          y = _menu$getLocation.y;

      var _menu$getSize = menu.getSize(),
          width = _menu$getSize.width,
          height = _menu$getSize.height;

      return {
        left: x,
        top: y,
        right: x + width,
        bottom: y + height
      };
    }
    /**
     * Returns true when the arrow to scroll down exits, false otherwise.
     * @method
     * @returns {bool}
     */

  }, {
    key: "arrowDownExists",
    value: function arrowDownExists() {
      return $(this.rootElement).$('[data-id="internal-dropdown-arrow-down"]').isExisting();
    }
    /**
     * Returns true when the arrow to scroll down exits, false otherwise.
     * @method
     * @returns {bool}
     */

  }, {
    key: "arrowUpExists",
    value: function arrowUpExists() {
      return $(this.rootElement).$('[data-id="internal-dropdown-arrow-up"]').isExisting();
    }
    /**
     * Returns true when the search no results found, false otherwise.
     * @method
     * @returns {bool}
     */

  }, {
    key: "emptyMessageExist",
    value: function emptyMessageExist() {
      return $(this.rootElement).$('[data-id="internal-dropdown-empty-message"]').isExisting();
    }
    /**
     * Clicks the input element.
     * @method
     */

  }, {
    key: "clickSearch",
    value: function clickSearch() {
      $(this.rootElement).$('input[type="search"]').click();
    }
    /**
     * Type in the input element.
     * @method
     * @param {string} value - The value to type in the input element.
     */

  }, {
    key: "setQuery",
    value: function setQuery(value) {
      $(this.rootElement).$('input[type="search"]').setValue(value);
    }
  }]);
  return PageInternalDropdown;
}();

module.exports = PageInternalDropdown;