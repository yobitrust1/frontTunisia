"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var PageTableRow = require('./row');

var HEAD_CHECKBOX_LABEL_SELECTOR = 'label[data-id="table-input-checkbox_label"]';
var HEAD_CHECKBOX_INPUT_SELECTOR = 'input[type="checkbox"]';
/**
 * Table page object class.
 * @class
 */

var PageTable = /*#__PURE__*/function () {
  /**
   * Create a new Table page object.
   * @constructor
   * @param {string} rootElement - The selector of the Table root element.
   */
  function PageTable(rootElement) {
    (0, _classCallCheck2["default"])(this, PageTable);
    this.rootElement = rootElement;
  }
  /**
   * Clicks the head checkbox to select the maximum selectable rows.
   * @method
   */


  (0, _createClass2["default"])(PageTable, [{
    key: "selectAllRows",
    value: function selectAllRows() {
      var headCheckbox = $(this.rootElement).$('thead').$(HEAD_CHECKBOX_INPUT_SELECTOR);

      if (!headCheckbox.isSelected() && !headCheckbox.getAttribute('indeterminate')) {
        $(this.rootElement).$('thead').$(HEAD_CHECKBOX_LABEL_SELECTOR).click();
      }
    }
    /**
     * Clicks the head checkbox to deselect all selected rows.
     * @method
     */

  }, {
    key: "deselectAllRows",
    value: function deselectAllRows() {
      var headCheckbox = $(this.rootElement).$('thead').$(HEAD_CHECKBOX_INPUT_SELECTOR);

      if (headCheckbox.isSelected() || headCheckbox.getAttribute('indeterminate')) {
        $(this.rootElement).$('thead').$(HEAD_CHECKBOX_LABEL_SELECTOR).click();
      }
    }
    /**
     * Returns a new Row page object of the row in the position passed.
     * @method
     * @param {number} rowPosition - The base 0 index of the row item.
     */

  }, {
    key: "getRow",
    value: function getRow(rowPosition) {
      var rows = $(this.rootElement).$$('tbody > tr[data-id="table_body-row"]');

      if (rows[rowPosition]) {
        return new PageTableRow("".concat(this.rootElement, " tr[data-id=\"table_body-row\"]:nth-child(").concat(rowPosition + 1, ")"));
      }

      return null;
    }
    /**
     * Wait until the data is loaded.
     * @method
     */

  }, {
    key: "waitUntilDataIsLoaded",
    value: function waitUntilDataIsLoaded() {
      var _this = this;

      browser.waitUntil(function () {
        return !$(_this.rootElement).$('div[data-id="table_body--loading"]').isDisplayed() && $(_this.rootElement).$('tr[data-id="table_body-row"]').isDisplayed();
      });
    }
  }]);
  return PageTable;
}();

module.exports = PageTable;