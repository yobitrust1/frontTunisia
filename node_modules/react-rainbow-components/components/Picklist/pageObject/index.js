"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var PageInternalDropdown = require('../../InternalDropdown/pageObject');

var privateGetMenu = Symbol('privateGetMenu');
/**
 * Picklist page object class.
 * @class
 * @tutorial picklist
 */

var PagePicklist = /*#__PURE__*/function () {
  /**
   * Create a new PagePicklist page object.
   * @constructor
   * @param {string} rootElement - The selector of the PagePicklist root element.
   */
  function PagePicklist(rootElement) {
    (0, _classCallCheck2["default"])(this, PagePicklist);
    this.rootElement = rootElement;
  }
  /**
   * Clicks the input element.
   * @method
   */


  (0, _createClass2["default"])(PagePicklist, [{
    key: "clickInput",
    value: function clickInput() {
      $(this.rootElement).$('input[type="text"]').click();
    }
    /**
     * Focus the input element.
     * @method
     */

  }, {
    key: "focusInput",
    value: function focusInput() {
      $(this.rootElement).$('input[type="text"]').doubleClick();
    }
    /**
     * Returns true when the input element has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasFocusInput",
    value: function hasFocusInput() {
      return $(this.rootElement).$('input[type="text"]').isFocused();
    }
    /**
     * It move the pointer off any menu scroll arrow
     * @method
     */

  }, {
    key: "mouseLeaveScrollArrow",
    value: function mouseLeaveScrollArrow() {
      return $(this.rootElement).$('input[type="text"]').moveTo();
    }
    /**
     * Returns the label of the selected PicklistOption
     * @method
     * @returns {string}
     */

  }, {
    key: "getSelectedOptionLabel",
    value: function getSelectedOptionLabel() {
      return $(this.rootElement).$('input[type="text"]').getValue();
    }
    /**
     * Returns true when the options menu is open, false otherwise.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isMenuOpen",
    value: function isMenuOpen() {
      return $(this.rootElement).$('div[role="combobox"]').getAttribute('aria-expanded') === 'true';
    }
    /**
     * Wait until the options menu is open.
     * @method
     */

  }, {
    key: "waitUntilOpen",
    value: function waitUntilOpen() {
      var _this = this;

      browser.waitUntil(function () {
        return _this.isMenuOpen();
      });
    }
    /**
     * Returns a new InternalDropdown page object for the element with the supplied id.
     * @method
     */

  }, {
    key: privateGetMenu,
    value: function value() {
      var menuId = "#".concat($(this.rootElement).$('input[type="text"]').getAttribute('aria-controls'));

      if (this.isMenuOpen()) {
        return new PageInternalDropdown(menuId);
      }

      return null;
    }
    /**
     * It moves the pointer over the menu scroll up arrow
     * @method
     */

  }, {
    key: "hoverScrollUpArrow",
    value: function hoverScrollUpArrow() {
      return this[privateGetMenu]().hoverScrollUpArrow();
    }
    /**
     * It moves the pointer over the menu scroll down arrow
     * @method
     */

  }, {
    key: "hoverScrollDownArrow",
    value: function hoverScrollDownArrow() {
      return this[privateGetMenu]().hoverScrollDownArrow();
    }
    /**
     * Get the number of registered options.
     * @method
     * @returns {number}
     */

  }, {
    key: "getOptionsLength",
    value: function getOptionsLength() {
      return this[privateGetMenu]().getOptionsLength();
    }
    /**
     * Returns a new PicklistOption page object of the element in item position.
     * @method
     * @param {number} optionIndex - The base 0 index of the PicklistOption.
     */

  }, {
    key: "getOption",
    value: function getOption(optionIndex) {
      return this[privateGetMenu]().getOption(optionIndex);
    }
    /**
     * Clicks the search element
     * @method
     */

  }, {
    key: "clickSearch",
    value: function clickSearch() {
      return this[privateGetMenu]().clickSearch();
    }
  }]);
  return PagePicklist;
}();

module.exports = PagePicklist;