"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = AvatarMenu;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _PrimitiveMenu = _interopRequireDefault(require("../PrimitiveMenu"));

var _avatarButton = _interopRequireDefault(require("./avatarButton"));

/**
 * A Avatar Menu offers a list of actions or functions that a user can access.
 */
function AvatarMenu(props) {
  var src = props.src,
      initials = props.initials,
      icon = props.icon,
      avatarSize = props.avatarSize,
      initialsVariant = props.initialsVariant,
      title = props.title,
      assistiveText = props.assistiveText,
      disabled = props.disabled,
      tabIndex = props.tabIndex,
      onClick = props.onClick,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      children = props.children,
      rest = (0, _objectWithoutProperties2["default"])(props, ["src", "initials", "icon", "avatarSize", "initialsVariant", "title", "assistiveText", "disabled", "tabIndex", "onClick", "onFocus", "onBlur", "children"]);
  return /*#__PURE__*/_react["default"].createElement(_PrimitiveMenu["default"] // eslint-disable-next-line react/jsx-props-no-spreading
  , (0, _extends2["default"])({}, rest, {
    src: src,
    icon: icon,
    initials: initials,
    disabled: disabled,
    tabIndex: tabIndex,
    avatarSize: avatarSize,
    initialsVariant: initialsVariant,
    title: title,
    assistiveText: assistiveText,
    onClick: onClick,
    onFocus: onFocus,
    onBlur: onBlur,
    trigger: _avatarButton["default"]
  }), children);
}

AvatarMenu.propTypes = {
  /** The URL for the image.
   * It take precedence over the initials and icon. */
  src: _propTypes["default"].string,

  /** If the record name contains two words, like first and last name,
   * use the first capitalized letter of each. For records that only have a single word name,
   * use the first two letters of that word using one capital and one lower case letter. */
  initials: _propTypes["default"].string,

  /** The fallback icon to show when src and initials are not passed. */
  icon: _propTypes["default"].node,

  /** The size of the avatar. Valid values are x-small, small, medium, and large.
   * It take precedence over the icon.
   * This value defaults to medium. */
  avatarSize: _propTypes["default"].oneOf(['x-small', 'small', 'medium', 'large']),

  /** A valid background color to customize the avatar. */
  avatarBackgroundColor: _propTypes["default"].string,

  /** The variant of the initials. Only make sense when initials is used. */
  initialsVariant: _propTypes["default"].oneOf(['default', 'inverse']),

  /** The content of the AvatarMenu. Used to render the menuItem elements
   * when the AvatarMenu is open. */
  children: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].node), _propTypes["default"].object]),

  /** The size of the menu. Options include xx-small, x-small, medium, or large.
   * This value defaults to small. */
  menuSize: _propTypes["default"].oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),

  /** Determines the alignment of the menu relative to the AvatarMenu.
   * Available options are: left, center, right, bottom, bottom-left, bottom-right.
   * This value defaults to left. */
  menuAlignment: _propTypes["default"].oneOf(['left', 'right', 'bottom', 'center', 'bottom-right', 'bottom-left']),

  /** If is set to true, then is showed a loading symbol. */
  isLoading: _propTypes["default"].bool,

  /** Displays tooltip text when the mouse moves over the element. */
  title: _propTypes["default"].string,

  /** A description for assistive sreen readers. */
  assistiveText: _propTypes["default"].string,

  /** Specifies the tab order of an element (when the tab button is used for navigating). */
  tabIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /** If true, the menu is disabled. Disabling the menu prevents users from opening it.
   * This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** The action triggered when the element is clicked. */
  onClick: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The id of the outer element. */
  id: _propTypes["default"].string
};
AvatarMenu.defaultProps = {
  src: undefined,
  initials: undefined,
  icon: null,
  avatarSize: 'medium',
  avatarBackgroundColor: '',
  initialsVariant: 'default',
  title: undefined,
  assistiveText: undefined,
  className: undefined,
  style: undefined,
  children: null,
  menuSize: 'xx-small',
  menuAlignment: 'left',
  isLoading: false,
  id: undefined,
  disabled: false,
  tabIndex: undefined,
  onClick: function onClick() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {}
};