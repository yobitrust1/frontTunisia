"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Pagination;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _leftArrow = _interopRequireDefault(require("./leftArrow"));

var _rightArrow = _interopRequireDefault(require("./rightArrow"));

var _navigationButton = _interopRequireDefault(require("./navigationButton"));

var _pageButtonsContainer = _interopRequireDefault(require("./pageButtonsContainer"));

var _nav = _interopRequireDefault(require("./styled/nav"));

var _paginationContainer = _interopRequireDefault(require("./styled/paginationContainer"));

/**
 * The Pagination component shows you the pagination options for dividing content into pages.
 * It is very useful when you want to display a large recordset on multiple pages.
 * @category Layout
 */
function Pagination(props) {
  var pages = props.pages,
      activePage = props.activePage,
      onChange = props.onChange,
      className = props.className,
      style = props.style,
      variant = props.variant;
  var isFirstItemSelected = activePage === 1;
  var isLastItemSelected = activePage === pages;
  return /*#__PURE__*/_react["default"].createElement(_nav["default"], {
    className: className,
    "aria-label": "pagination",
    style: style
  }, /*#__PURE__*/_react["default"].createElement(_paginationContainer["default"], null, /*#__PURE__*/_react["default"].createElement(_navigationButton["default"], {
    dataId: "previous-page-button",
    icon: /*#__PURE__*/_react["default"].createElement(_leftArrow["default"], null),
    onClick: function onClick(event) {
      return onChange(event, activePage - 1);
    },
    disabled: isFirstItemSelected,
    ariaLabel: "Goto Previous Page",
    variant: variant
  }), /*#__PURE__*/_react["default"].createElement(_pageButtonsContainer["default"], {
    onChange: onChange,
    pages: pages,
    activePage: activePage,
    variant: variant
  }), /*#__PURE__*/_react["default"].createElement(_navigationButton["default"], {
    dataId: "next-page-button",
    icon: /*#__PURE__*/_react["default"].createElement(_rightArrow["default"], null),
    onClick: function onClick(event) {
      return onChange(event, activePage + 1);
    },
    disabled: isLastItemSelected,
    ariaLabel: "Goto Next Page",
    variant: variant
  })));
}

Pagination.propTypes = {
  /** The total number of pages. e.g. if your collection has 120 items and the page
  size is 50 then pages={Math.ceil(120/50)}/pages={3} */
  pages: _propTypes["default"].number.isRequired,

  /** The number of the page that is selected. */
  activePage: _propTypes["default"].number,

  /** The action triggered when page button is clicked. */
  onChange: _propTypes["default"].func,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The variant changes the appearance of the Input. Accepted variants include default
   * and shaded. This value defaults to default. */
  variant: _propTypes["default"].oneOf(['default', 'shaded'])
};
Pagination.defaultProps = {
  activePage: undefined,
  onChange: function onChange() {},
  className: undefined,
  style: undefined,
  variant: 'default'
};