"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _label = _interopRequireDefault(require("../Input/label"));

var _iconContainer = _interopRequireDefault(require("../Input/styled/iconContainer"));

var _relativeElement = _interopRequireDefault(require("../Structural/relativeElement"));

var _input = _interopRequireDefault(require("./styled/input"));

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _errorText = _interopRequireDefault(require("../Input/styled/errorText"));

var _strengthBar = _interopRequireDefault(require("./strengthBar"));

var _styled = require("./styled");

var _hooks = require("../../libs/hooks");

var _usePasswordState = _interopRequireDefault(require("./hooks/usePasswordState"));

var _useReduxForm2 = _interopRequireDefault(require("../../libs/hooks/useReduxForm"));

/* eslint-disable react/no-unused-prop-types */
// TODO: change to import from index

/**
 * StrongPasswordInput component is used to provide feedback about password strength
 * @category Form
 */
var StrongPasswordInput = /*#__PURE__*/_react["default"].forwardRef(function (props, ref) {
  var _useReduxForm = (0, _useReduxForm2["default"])(props),
      id = _useReduxForm.id,
      className = _useReduxForm.className,
      style = _useReduxForm.style,
      bottomHelpText = _useReduxForm.bottomHelpText,
      error = _useReduxForm.error,
      passwordState = _useReduxForm.passwordState,
      passwordStateLabels = _useReduxForm.passwordStateLabels,
      value = _useReduxForm.value,
      placeholder = _useReduxForm.placeholder,
      onChange = _useReduxForm.onChange,
      disabled = _useReduxForm.disabled,
      readOnly = _useReduxForm.readOnly,
      tabIndex = _useReduxForm.tabIndex,
      onFocus = _useReduxForm.onFocus,
      onBlur = _useReduxForm.onBlur,
      onClick = _useReduxForm.onClick,
      onKeyDown = _useReduxForm.onKeyDown,
      maxLength = _useReduxForm.maxLength,
      minLength = _useReduxForm.minLength,
      icon = _useReduxForm.icon,
      required = _useReduxForm.required,
      name = _useReduxForm.name,
      label = _useReduxForm.label,
      labelAlignment = _useReduxForm.labelAlignment,
      hideLabel = _useReduxForm.hideLabel,
      iconPosition = _useReduxForm.iconPosition;

  var inputId = (0, _hooks.useUniqueIdentifier)('input');
  var errorMessageId = (0, _hooks.useErrorMessageId)(error);
  var labelId = (0, _hooks.useLabelId)(label);
  var status = (0, _usePasswordState["default"])(passwordState);
  var inputRef = (0, _react.useRef)();
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      focus: function focus() {
        inputRef.current.focus();
      },
      click: function click() {
        inputRef.current.click();
      },
      blur: function blur() {
        inputRef.current.blur();
      }
    };
  });
  return /*#__PURE__*/_react["default"].createElement(_styled.StyledContainer, {
    id: id,
    className: className,
    style: style
  }, /*#__PURE__*/_react["default"].createElement(_label["default"], {
    label: label,
    labelAlignment: labelAlignment,
    hideLabel: hideLabel,
    required: required,
    inputId: inputId,
    readOnly: readOnly,
    id: labelId
  }), /*#__PURE__*/_react["default"].createElement(_relativeElement["default"], null, /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
    isTrue: icon
  }, /*#__PURE__*/_react["default"].createElement(_iconContainer["default"], {
    iconPosition: iconPosition,
    readOnly: readOnly,
    error: error
  }, icon)), /*#__PURE__*/_react["default"].createElement(_input["default"], {
    id: inputId,
    name: name,
    type: "password",
    value: value,
    placeholder: placeholder,
    onChange: onChange,
    tabIndex: tabIndex,
    onFocus: onFocus,
    onBlur: onBlur,
    onClick: onClick,
    onKeyDown: onKeyDown,
    disabled: disabled,
    readOnly: readOnly,
    required: required,
    maxLength: maxLength,
    minLength: minLength,
    "aria-labelledby": labelId,
    "aria-describedby": errorMessageId,
    iconPosition: iconPosition,
    icon: icon,
    error: error,
    status: status,
    ref: inputRef
  })), /*#__PURE__*/_react["default"].createElement(_strengthBar["default"], {
    passwordState: passwordState,
    passwordStateLabels: passwordStateLabels
  }), /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
    isTrue: bottomHelpText
  }, /*#__PURE__*/_react["default"].createElement(_styled.StyledHelpText, {
    alignSelf: "center"
  }, bottomHelpText)), /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
    isTrue: error
  }, /*#__PURE__*/_react["default"].createElement(_errorText["default"], {
    alignSelf: "center",
    id: errorMessageId
  }, error)));
});

StrongPasswordInput.propTypes = {
  /** Specifies the value of an input element. */
  value: _propTypes["default"].string,

  /** The name of the input. */
  name: _propTypes["default"].string,

  /** Text label for the input. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Describes the position of the StrongPasswordInput label. Options include left, center and right.
   * This value defaults to center. */
  labelAlignment: _propTypes["default"].oneOf(['left', 'center', 'right']),

  /** A boolean to hide the StrongPasswordInput label. */
  hideLabel: _propTypes["default"].bool,

  /** Text that is displayed when the field is empty, to prompt the user for a valid entry. */
  placeholder: _propTypes["default"].string,

  /** The icon to show if it is passed. It must be a svg icon or a font icon. */
  icon: _propTypes["default"].node,

  /** Describes the position of the icon with respect to body. Options include left and right.
   * This value defaults to left. */
  iconPosition: _propTypes["default"].oneOf(['left', 'right']),

  /** The maximum number of characters allowed in the field. */
  maxLength: _propTypes["default"].number,

  /** The minimum number of characters allowed in the field. */
  minLength: _propTypes["default"].number,

  /** Shows the help message below the input. */
  bottomHelpText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that an input field must be filled out before submitting the form.
   * This value defaults to false. */
  required: _propTypes["default"].bool,

  /** Specifies that an input field must be filled out before submitting the form. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that an input element should be disabled. This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** Specifies that an input field is read-only. This value defaults to false. */
  readOnly: _propTypes["default"].bool,

  /** Specifies the tab order of an element (when the tab button is used for navigating). */
  tabIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /** The action triggered when a value attribute changes. */
  onChange: _propTypes["default"].func,

  /** The action triggered when the element is clicked. */
  onClick: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** The action triggered when a key is pressed on the element. */
  onKeyDown: _propTypes["default"].func,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The id of the outer element. */
  id: _propTypes["default"].string,

  /** The state of the password strenght */
  passwordState: _propTypes["default"].oneOf(['weak', 'average', 'strong']),

  /** The label to show at the right of the bar */
  passwordStateLabels: _propTypes["default"].shape({
    weak: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),
    average: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),
    strong: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node])
  })
};
StrongPasswordInput.defaultProps = {
  value: undefined,
  name: undefined,
  placeholder: null,
  icon: undefined,
  iconPosition: 'left',
  maxLength: undefined,
  minLength: undefined,
  bottomHelpText: null,
  required: false,
  error: null,
  disabled: false,
  readOnly: false,
  onChange: function onChange() {},
  tabIndex: undefined,
  onClick: function onClick() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  onKeyDown: function onKeyDown() {},
  className: undefined,
  style: undefined,
  id: undefined,
  label: undefined,
  labelAlignment: 'center',
  hideLabel: false,
  passwordState: undefined,
  passwordStateLabels: undefined
};
var _default = StrongPasswordInput;
exports["default"] = _default;