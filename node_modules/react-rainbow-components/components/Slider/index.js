"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("../../libs/utils");

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _container = _interopRequireDefault(require("./styled/container"));

var _label = _interopRequireDefault(require("./styled/label"));

var _slider = _interopRequireDefault(require("./styled/slider"));

var _inputRange = _interopRequireDefault(require("./styled/inputRange"));

var _value = _interopRequireDefault(require("./styled/value"));

var _errorText = _interopRequireDefault(require("../Input/styled/errorText"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * An input range slider lets the user specify a numeric value which must be between
 * two specified values.
 * @category Form
 */
var Slider = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(Slider, _Component);

  var _super = _createSuper(Slider);

  function Slider(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Slider);
    _this = _super.call(this, props);
    _this.sliderId = (0, _utils.uniqueId)('slider-id');
    _this.errorMessageId = (0, _utils.uniqueId)('error-message');
    _this.sliderRef = /*#__PURE__*/_react["default"].createRef();
    return _this;
  }

  (0, _createClass2["default"])(Slider, [{
    key: "getAriaDescribedBy",
    value: function getAriaDescribedBy() {
      var error = this.props.error;

      if (error) {
        return this.errorMessageId;
      }

      return undefined;
    }
    /**
     * Sets click on the element.
     * @public
     */

  }, {
    key: "click",
    value: function click() {
      this.sliderRef.current.click();
    }
    /**
     * Sets focus on the element.
     * @public
     */

  }, {
    key: "focus",
    value: function focus() {
      this.sliderRef.current.focus();
    }
    /**
     * Sets blur on the element.
     * @public
     */

  }, {
    key: "blur",
    value: function blur() {
      this.sliderRef.current.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          label = _this$props.label,
          value = _this$props.value,
          name = _this$props.name,
          min = _this$props.min,
          max = _this$props.max,
          step = _this$props.step,
          error = _this$props.error,
          disabled = _this$props.disabled,
          onBlur = _this$props.onBlur,
          onChange = _this$props.onChange,
          onClick = _this$props.onClick,
          onFocus = _this$props.onFocus,
          style = _this$props.style,
          className = _this$props.className,
          labelAlignment = _this$props.labelAlignment,
          hideLabel = _this$props.hideLabel;
      return /*#__PURE__*/_react["default"].createElement(_container["default"], {
        className: className,
        style: style
      }, /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
        isTrue: label
      }, /*#__PURE__*/_react["default"].createElement(_label["default"], {
        label: label,
        labelAlignment: labelAlignment,
        hideLabel: hideLabel,
        inputId: this.sliderId
      })), /*#__PURE__*/_react["default"].createElement(_slider["default"], null, /*#__PURE__*/_react["default"].createElement(_inputRange["default"], {
        id: this.sliderId,
        type: "range",
        name: name,
        value: value,
        min: min,
        max: max,
        step: step,
        "aria-describedby": this.getAriaDescribedBy(),
        disabled: disabled,
        onClick: onClick,
        onChange: onChange,
        onBlur: onBlur,
        onFocus: onFocus,
        ref: this.sliderRef
      }), /*#__PURE__*/_react["default"].createElement(_value["default"], {
        "aria-hidden": true
      }, value)), /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
        isTrue: error
      }, /*#__PURE__*/_react["default"].createElement(_errorText["default"], {
        id: this.errorMessageId
      }, error)));
    }
  }]);
  return Slider;
}(_react.Component);

exports["default"] = Slider;
Slider.propTypes = {
  /** The text label for the slider. Provide your own label to describe the slider.
   * Otherwise, no label is displayed. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Describes the position of the Slider label. Options include left, center and right.
   * This value defaults to center. */
  labelAlignment: _propTypes["default"].oneOf(['left', 'center', 'right']),

  /** A boolean to hide the Slider label */
  hideLabel: _propTypes["default"].bool,

  /** The numerical value of the slider. This value defaults to 0. */
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /** The name of the Slider. */
  name: _propTypes["default"].string,

  /** The min value of the slider. This value defaults to 0. */
  min: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /** The max value of the slider. This value defaults to 100. */
  max: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /** The step increment value of the slider. Example steps include 0.1, 1, or 10.
   * This value defaults to 1. */
  step: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /** Specifies that the slider element must have a value selected before submitting the form. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that the slider element should be disabled. This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** The action triggered when a value attribute changes. */
  onChange: _propTypes["default"].func,

  /** The action triggered when the element is clicked. */
  onClick: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object
};
Slider.defaultProps = {
  label: null,
  value: undefined,
  name: undefined,
  min: 0,
  max: 100,
  step: 1,
  error: undefined,
  disabled: false,
  onChange: function onChange() {},
  onClick: function onClick() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  className: undefined,
  style: null,
  labelAlignment: 'center',
  hideLabel: false
};