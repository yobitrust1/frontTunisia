"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var PagePrimitiveMenu = require('../../PrimitiveMenu/pageObject');
/**
 * ButtonMenu page object class.
 * @class
 * @tutorial buttonMenu
 */


var PageButtonMenu = /*#__PURE__*/function () {
  /**
   * Create a new ButtonMenu page object.
   * @constructor
   * @param {string} rootElement - The selector of the ButtonMenu root element.
   */
  function PageButtonMenu(rootElement) {
    (0, _classCallCheck2["default"])(this, PageButtonMenu);
    this.rootElement = rootElement;
    this.primitiveMenu = new PagePrimitiveMenu("".concat(rootElement, " button"));
  }
  /**
   * Returns a new MenuItem page object of the element in item position.
   * @method
   * @param {number} itemPosition - The base 0 index of the MenuItem.
   */


  (0, _createClass2["default"])(PageButtonMenu, [{
    key: "getItem",
    value: function getItem(itemPosition) {
      return this.primitiveMenu.getItem(itemPosition);
    }
    /**
     * Clicks the button element.
     * @method
     */

  }, {
    key: "click",
    value: function click() {
      this.primitiveMenu.clickTrigger();
    }
    /**
     * Returns true when the menu is open, false otherwise.
     * @method
     * @returns {bool}
     */

  }, {
    key: "isOpen",
    value: function isOpen() {
      return this.primitiveMenu.isDropdownOpen();
    }
    /**
     * Returns true when the button element has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: "hasFocusButton",
    value: function hasFocusButton() {
      return this.primitiveMenu.hasFocusTrigger();
    }
  }]);
  return PageButtonMenu;
}();

module.exports = PageButtonMenu;