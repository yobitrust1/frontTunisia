"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = HighlightedText;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _hitText = _interopRequireDefault(require("./hitText"));

var _highlighContainer = _interopRequireDefault(require("./highlighContainer"));

var _index = require("./styled/index");

/* eslint-disable react/no-unused-prop-types */

/**
 * HighlightedText is a component that highlights a part of a text.
 */
function HighlightedText(props) {
  var style = props.style,
      className = props.className,
      parts = props.parts,
      hitComponent = props.hitComponent,
      textComponent = props.textComponent,
      isInline = props.isInline;
  var finalHitContainer = hitComponent || _index.DefaultHitContainer;
  var finalTextContainer = textComponent || _index.DefaultTextContainer;
  return /*#__PURE__*/_react["default"].createElement(_highlighContainer["default"], {
    className: className,
    style: style,
    isInline: isInline
  }, /*#__PURE__*/_react["default"].createElement(_hitText["default"], {
    parts: parts,
    hitComponent: finalHitContainer,
    textComponent: finalTextContainer
  }));
}

HighlightedText.propTypes = {
  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with the custom styles of the container. */
  style: _propTypes["default"].object,

  /** An array of objects with the text and the part to be highlighted */
  parts: _propTypes["default"].arrayOf(_propTypes["default"].exact({
    value: _propTypes["default"].string,
    type: _propTypes["default"].string
  })),

  /**
   * The component class or function that is going to be use to render
   * the highlighted text
   */
  hitComponent: _propTypes["default"].elementType,

  /**
   * The component class or function that is going to be use to render
   * the text not highlighted
   */
  textComponent: _propTypes["default"].elementType,

  /** A boolean that when it is true display the text inline, and when it is false display the text block. */
  isInline: _propTypes["default"].bool
};
HighlightedText.defaultProps = {
  className: undefined,
  style: undefined,
  parts: undefined,
  hitComponent: undefined,
  textComponent: undefined,
  isInline: false
};