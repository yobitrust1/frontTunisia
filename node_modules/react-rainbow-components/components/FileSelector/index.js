"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _label = _interopRequireDefault(require("../Input/label"));

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _helpText = _interopRequireDefault(require("../Input/styled/helpText"));

var _errorText = _interopRequireDefault(require("../Input/styled/errorText"));

var _styled = require("./styled");

var _icons = require("./icons");

var _hooks = require("../../libs/hooks");

var _icon = _interopRequireDefault(require("./icon"));

var _getText = _interopRequireDefault(require("./helpers/getText"));

/* eslint-disable react/no-unused-prop-types */
var FileSelector = /*#__PURE__*/_react["default"].forwardRef(function (props, ref) {
  var _useReduxForm = (0, _hooks.useReduxForm)(props),
      className = _useReduxForm.className,
      style = _useReduxForm.style,
      id = _useReduxForm.id,
      name = _useReduxForm.name,
      label = _useReduxForm.label,
      error = _useReduxForm.error,
      uploadIcon = _useReduxForm.uploadIcon,
      bottomHelpText = _useReduxForm.bottomHelpText,
      placeholder = _useReduxForm.placeholder,
      tabIndex = _useReduxForm.tabIndex,
      required = _useReduxForm.required,
      multiple = _useReduxForm.multiple,
      disabled = _useReduxForm.disabled,
      variant = _useReduxForm.variant,
      labelAlignment = _useReduxForm.labelAlignment,
      hideLabel = _useReduxForm.hideLabel,
      accept = _useReduxForm.accept,
      onChange = _useReduxForm.onChange,
      onFocus = _useReduxForm.onFocus,
      onBlur = _useReduxForm.onBlur,
      value = _useReduxForm.value;

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isDragOver = _useState2[0],
      setIsDragOver = _useState2[1];

  var _useState3 = (0, _react.useState)(),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      files = _useState4[0],
      setFiles = _useState4[1];

  var _useState5 = (0, _react.useState)(),
      _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
      hasFocus = _useState6[0],
      setHasFocus = _useState6[1];

  var inputId = (0, _hooks.useUniqueIdentifier)('input');
  var buttonId = (0, _hooks.useUniqueIdentifier)('cancel-button');
  var dropzoneId = (0, _hooks.useUniqueIdentifier)('dropzone');
  var labelId = (0, _hooks.useLabelId)(label);
  var errorMessageId = (0, _hooks.useErrorMessageId)(error);
  var inputRef = (0, _react.useRef)();
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      focus: function focus() {
        inputRef.current.focus();
      },
      click: function click() {
        inputRef.current.click();
      },
      blur: function blur() {
        inputRef.current.blur();
      }
    };
  });
  (0, _react.useEffect)(function () {
    inputRef.current.files = files;
  }, [files]);

  var handleDragEnter = function handleDragEnter() {
    if (disabled) {
      return;
    }

    setIsDragOver(true);
  };

  var handleDragLeave = function handleDragLeave(event) {
    if (!event.relatedTarget || event.relatedTarget.id !== buttonId) {
      setIsDragOver(false);
    }
  };

  var handleDrop = function handleDrop(event) {
    setIsDragOver(false);
    setFiles(event.nativeEvent.dataTransfer.files);
  };

  var handleChange = function handleChange(event) {
    var eventFiles = event.target.files;
    setFiles(eventFiles);

    if (onChange) {
      onChange(eventFiles);
    }
  };

  var handleCancel = function handleCancel(event) {
    event.preventDefault();
    event.stopPropagation();
    var list = new DataTransfer();
    setFiles(list.files);

    if (onChange) {
      onChange(list.files);
    }
  };

  var handleFocus = function handleFocus(event) {
    setHasFocus(true);
    onFocus(event);
  };

  var handleBlur = function handleBlur(event) {
    setHasFocus(false);
    onBlur(event);
  };

  var text = (0, _getText["default"])(files, placeholder, value);
  var isFileSelected = files && files.length > 0;
  var isSingleFile = files && files.length === 1;
  var shouldRenderCancel = isFileSelected && !isDragOver && value !== null;
  return /*#__PURE__*/_react["default"].createElement(_styled.StyledContainer, {
    id: id,
    className: className,
    style: style
  }, /*#__PURE__*/_react["default"].createElement(_label["default"], {
    label: label,
    labelAlignment: labelAlignment,
    hideLabel: hideLabel,
    required: required,
    inputId: inputId,
    id: labelId
  }), /*#__PURE__*/_react["default"].createElement(_styled.StyledDropzone, {
    id: dropzoneId,
    variant: variant,
    isDragOver: isDragOver,
    hasFocus: hasFocus,
    disabled: disabled,
    error: error
  }, /*#__PURE__*/_react["default"].createElement(_styled.StyledInput, {
    type: "file",
    id: inputId,
    name: name,
    multiple: multiple,
    disabled: disabled,
    required: required,
    onChange: handleChange,
    tabIndex: tabIndex,
    accept: accept,
    onFocus: handleFocus,
    onBlur: handleBlur,
    "aria-labelledby": labelId,
    "aria-describedby": errorMessageId,
    ref: inputRef,
    onDragEnter: handleDragEnter,
    onDragLeave: handleDragLeave,
    onDrop: handleDrop
  }), /*#__PURE__*/_react["default"].createElement(_styled.StyledBackdrop, {
    isFileSelected: isFileSelected,
    variant: variant
  }, /*#__PURE__*/_react["default"].createElement(_styled.StyledIconContainer, {
    iconPosition: "left",
    isSingleFile: isSingleFile,
    variant: variant,
    error: error,
    disabled: disabled
  }, /*#__PURE__*/_react["default"].createElement(_icon["default"], {
    files: files,
    error: error,
    isDragOver: isDragOver,
    value: value,
    uploadIcon: uploadIcon
  })), /*#__PURE__*/_react["default"].createElement(_styled.TruncatedText, null, text), /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
    isTrue: shouldRenderCancel
  }, /*#__PURE__*/_react["default"].createElement(_styled.StyledIconContainer, {
    iconPosition: "right"
  }, /*#__PURE__*/_react["default"].createElement(_styled.StyledButtonIcon, {
    id: buttonId,
    size: "xx-small",
    icon: /*#__PURE__*/_react["default"].createElement(_icons.CancelIcon, null),
    onClick: handleCancel,
    pickerVariant: variant
  }))))), /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
    isTrue: bottomHelpText
  }, /*#__PURE__*/_react["default"].createElement(_helpText["default"], {
    alignSelf: "center"
  }, bottomHelpText)), /*#__PURE__*/_react["default"].createElement(_RenderIf["default"], {
    isTrue: error
  }, /*#__PURE__*/_react["default"].createElement(_errorText["default"], {
    alignSelf: "center",
    id: errorMessageId
  }, error)));
});

FileSelector.propTypes = {
  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The id of the outer element. */
  id: _propTypes["default"].string,

  /** The name of the input. */
  name: _propTypes["default"].string,

  /** Text label for the input. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that an input field must be filled out before submitting the form. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** The icon shown in the FileSelector. In case of not being specified, a cloud icon will be shown by default. */
  uploadIcon: _propTypes["default"].node,

  /** Shows the help message below the input. */
  bottomHelpText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Text that is displayed when the field is empty, to prompt the user for a valid entry. */
  placeholder: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies the tab order of an element (when the tab button is used for navigating). */
  tabIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /** Specifies that an input field must be filled out before submitting the form.
   * This value defaults to false. */
  required: _propTypes["default"].bool,

  /** Specifies that multiple files can be picked. */
  multiple: _propTypes["default"].bool,

  /** Specifies that an input element should be disabled. This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** Specifies that the variant of the file selector. */
  variant: _propTypes["default"].oneOf(['inline', 'multiline']),

  /** Describes the position of the FileSelector label. Options include left, center and right.
   * This value defaults to center. */
  labelAlignment: _propTypes["default"].oneOf(['left', 'center', 'right']),

  /** A boolean to hide the FileSelector label. */
  hideLabel: _propTypes["default"].bool,

  /** A string that defines the file types the file input should accept. */
  accept: _propTypes["default"].string,

  /** The action triggered when a value attribute changes. */
  onChange: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** A null value that prevents the icon from changing after a file is loaded  */
  value: _propTypes["default"].object
};
FileSelector.defaultProps = {
  className: undefined,
  style: undefined,
  id: undefined,
  name: undefined,
  label: undefined,
  error: undefined,
  uploadIcon: undefined,
  bottomHelpText: undefined,
  placeholder: 'Drag & Drop or Click to Browse',
  tabIndex: undefined,
  required: false,
  multiple: false,
  disabled: false,
  variant: 'inline',
  labelAlignment: 'center',
  hideLabel: false,
  accept: undefined,
  value: undefined,
  onChange: function onChange() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {}
};
var _default = FileSelector;
exports["default"] = _default;