"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _index = _interopRequireDefault(require("../index"));

var _AccordionSection = _interopRequireDefault(require("../../AccordionSection"));

var _content = _interopRequireDefault(require("../../AccordionSection/styled/content"));

describe('<Accordion />', function () {
  it('should set the right "state" when onToggleSection is passed and it is not a function', function () {
    var component = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_index["default"], {
      onToggleSection: "string"
    }, /*#__PURE__*/_react["default"].createElement(_AccordionSection["default"], {
      name: "accordion-test-1",
      label: "Rainbow Accordion"
    }, "AccordionSection-1")));
    var buttonComponent = component.find('ButtonIcon');
    buttonComponent.simulate('click');
    expect(component.state('activeNames')).toEqual('accordion-test-1');
  });
  it('should set the right "state" when multiple is passed', function () {
    var activeNames = ['accordion-test-1'];
    var component = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_index["default"], {
      multiple: true,
      activeSectionNames: activeNames
    }, /*#__PURE__*/_react["default"].createElement(_AccordionSection["default"], {
      name: "accordion-test-1",
      label: "Rainbow Accordion"
    }, "AccordionSection-1"), /*#__PURE__*/_react["default"].createElement(_AccordionSection["default"], {
      name: "accordion-test-2",
      label: "Rainbow Accordion"
    }, "AccordionSection-2")));
    var secondAccordionSection = component.find('ul').childAt(1);
    var secondAccordionSectionButton = secondAccordionSection.find('ButtonIcon');
    secondAccordionSectionButton.simulate('click');
    expect(component.state('activeNames')).toEqual(['accordion-test-1', 'accordion-test-2']);
  });
  it('should not fire an event when click in the AccordionSection and disabled is passed', function () {
    var handleToggleSectionMockFn = jest.fn();
    var component = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_index["default"], {
      onToggleSection: handleToggleSectionMockFn
    }, /*#__PURE__*/_react["default"].createElement(_AccordionSection["default"], {
      disabled: true,
      name: "accordion-test-1",
      label: "Rainbow Accordion"
    }, "AccordionSection-1")));
    var buttonComponent = component.find('ButtonIcon');
    buttonComponent.simulate('click');
    expect(handleToggleSectionMockFn).toHaveBeenCalledTimes(0);
  });
  it('should fire an event with the right arguments when click in the AccordionSection and multiple is not passed', function () {
    var handleToggleSectionMockFn = jest.fn();
    var component = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_index["default"], {
      onToggleSection: handleToggleSectionMockFn
    }, /*#__PURE__*/_react["default"].createElement(_AccordionSection["default"], {
      name: "accordion-test-1",
      label: "Rainbow Accordion"
    }, "AccordionSection-1")));
    var buttonComponent = component.find('ButtonIcon');
    buttonComponent.simulate('click');
    expect(handleToggleSectionMockFn).toHaveBeenCalledWith(expect.any(Object), 'accordion-test-1');
  });
  it('should fire an event with the right arguments when click in the second AccordionSection and multiple is passed', function () {
    var handleToggleSectionMockFn = jest.fn();
    var activeNames = ['accordion-test-1'];
    var component = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_index["default"], {
      multiple: true,
      activeSectionNames: activeNames,
      onToggleSection: handleToggleSectionMockFn
    }, /*#__PURE__*/_react["default"].createElement(_AccordionSection["default"], {
      name: "accordion-test-1",
      label: "Rainbow Accordion"
    }, "AccordionSection-1"), /*#__PURE__*/_react["default"].createElement(_AccordionSection["default"], {
      name: "accordion-test-2",
      label: "Rainbow Accordion"
    }, "AccordionSection-2")));
    var secondAccordionSection = component.find('ul').childAt(1);
    var secondAccordionSectionButton = secondAccordionSection.find('ButtonIcon');
    secondAccordionSectionButton.simulate('click');
    expect(handleToggleSectionMockFn).toHaveBeenCalledWith(expect.any(Object), ['accordion-test-1', 'accordion-test-2']);
  });
  it('should fire an event with the right arguments when click in the expanded first AccordionSection', function () {
    var handleToggleSectionMockFn = jest.fn();
    var activeNames = 'accordion-test-1';
    var component = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_index["default"], {
      activeSectionNames: activeNames,
      onToggleSection: handleToggleSectionMockFn
    }, /*#__PURE__*/_react["default"].createElement(_AccordionSection["default"], {
      name: "accordion-test-1",
      label: "Rainbow Accordion"
    }, "AccordionSection-1"), /*#__PURE__*/_react["default"].createElement(_AccordionSection["default"], {
      name: "accordion-test-2",
      label: "Rainbow Accordion"
    }, "AccordionSection-2")));
    var firstAccordionSection = component.find('ul').childAt(0);
    var firstAccordionSectionButton = firstAccordionSection.find('ButtonIcon');
    firstAccordionSectionButton.simulate('click');
    expect(handleToggleSectionMockFn.mock.calls[0][1]).toEqual('');
  });
  it('should fire an event with the right arguments when click in the second AccordionSection, multiple is passed and both AccordionSection are expanded', function () {
    var handleToggleSectionMockFn = jest.fn();
    var activeNames = ['accordion-test-1', 'accordion-test-2'];
    var component = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_index["default"], {
      multiple: true,
      activeSectionNames: activeNames,
      onToggleSection: handleToggleSectionMockFn
    }, /*#__PURE__*/_react["default"].createElement(_AccordionSection["default"], {
      name: "accordion-test-1",
      label: "Rainbow Accordion"
    }, "AccordionSection-1"), /*#__PURE__*/_react["default"].createElement(_AccordionSection["default"], {
      name: "accordion-test-2",
      label: "Rainbow Accordion"
    }, "AccordionSection-2")));
    var secondAccordionSection = component.find('ul').childAt(1);
    var secondAccordionSectionButton = secondAccordionSection.find('ButtonIcon');
    secondAccordionSectionButton.simulate('click');
    expect(handleToggleSectionMockFn.mock.calls[0][1]).toEqual(['accordion-test-1']);
  });
  it('should fire an event with the right arguments when click in the second AccordionSection, it is collapsed for the first time and multiple is passed', function () {
    var handleToggleSectionMockFn = jest.fn();
    var component = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_index["default"], {
      multiple: true,
      onToggleSection: handleToggleSectionMockFn
    }, /*#__PURE__*/_react["default"].createElement(_AccordionSection["default"], {
      name: "accordion-test-1",
      label: "Rainbow Accordion"
    }, "AccordionSection-1"), /*#__PURE__*/_react["default"].createElement(_AccordionSection["default"], {
      name: "accordion-test-2",
      label: "Rainbow Accordion"
    }, "AccordionSection-2")));
    var secondAccordionSection = component.find('ul').childAt(1);
    var secondAccordionSectionButton = secondAccordionSection.find('ButtonIcon');
    secondAccordionSectionButton.simulate('click');
    expect(handleToggleSectionMockFn.mock.calls[0][1]).toEqual(['accordion-test-2']);
  });
  it('should set ariaExpanded to true in button when the AccordionSection is expanded', function () {
    var activeNames = 'accordion-test-1';
    var component = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_index["default"], {
      activeSectionNames: activeNames
    }, /*#__PURE__*/_react["default"].createElement(_AccordionSection["default"], {
      name: "accordion-test-1",
      label: "Rainbow Accordion"
    }, "AccordionSection-1")));
    var button = component.find('ButtonIcon');
    expect(button.prop('ariaExpanded')).toBe(true);
  });
  it('should set ariaExpanded to false in button when the AccordionSection is collapsed', function () {
    var component = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_index["default"], null, /*#__PURE__*/_react["default"].createElement(_AccordionSection["default"], {
      label: "Rainbow Accordion"
    }, "AccordionSection-1")));
    var button = component.find('ButtonIcon');
    expect(button.prop('ariaExpanded')).toBe(false);
  });
  it('should set aria-hidden to false in container of the content when the content is expanded', function () {
    var activeNames = 'accordion-test-1';
    var component = (0, _enzyme.mount)( /*#__PURE__*/_react["default"].createElement(_index["default"], {
      activeSectionNames: activeNames
    }, /*#__PURE__*/_react["default"].createElement(_AccordionSection["default"], {
      name: "accordion-test-1",
      label: "Rainbow Accordion"
    }, "AccordionSection-1")));
    var contentContainer = component.find(_content["default"]);
    expect(contentContainer.prop('aria-hidden')).toBe(false);
  });
});