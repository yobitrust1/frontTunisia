import _createForOfIteratorHelper from "@babel/runtime/helpers/esm/createForOfIteratorHelper";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState, useEffect } from 'react';
import { Button, Select, PopOver, isTwoDatesEqual, Icon } from '../index';
import { getCurrentMonth, getMonthIndex, daysInMonth, years, getCurrentWeek, shortWeekName } from './utils';

var Calendar = function Calendar(props) {
  var getInitialMonth = function getInitialMonth() {
    return getCurrentMonth(props.locale, new Date().getMonth());
  };

  var _useState = useState(getInitialMonth()),
      _useState2 = _slicedToArray(_useState, 2),
      month = _useState2[0],
      setMonth = _useState2[1];

  var _useState3 = useState(new Date().getFullYear()),
      _useState4 = _slicedToArray(_useState3, 2),
      year = _useState4[0],
      setYear = _useState4[1];

  var today = new Date().getDate();

  var componentClass = function componentClass() {
    var result = '';
    var className = {
      btn: 'rui-calendar',
      dark: props.dark ? 'dark' : '',
      size: props.size ? props.size : '',
      color: props.color && props.color !== 'default' ? props.color : 'primary',
      className: props.className ? props.className : ''
    };

    for (var key in className) {
      if (className[key]) result += className[key] + ' ';
    }

    return result.trim();
  };

  var hasDateEvent = function hasDateEvent(chosenDate) {
    if (props.events) {
      var _iterator = _createForOfIteratorHelper(props.events),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var item = _step.value;
          if (isTwoDatesEqual(item.date, chosenDate)) return item;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  };

  var isDateHoliday = function isDateHoliday(chosenDate) {
    if (props.holidays) {
      var _iterator2 = _createForOfIteratorHelper(props.holidays),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var item = _step2.value;
          if (isTwoDatesEqual(item.date, chosenDate)) return true;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  };

  var isItemToday = function isItemToday(item) {
    var restoredDate = new Date(year, getMonthIndex(month, props.locale), item);
    return isTwoDatesEqual(restoredDate, new Date());
  };

  var isItemActive = function isItemActive(item) {
    var restoredDate = new Date(year, getMonthIndex(month, props.locale), item);
    return isTwoDatesEqual(restoredDate, props.active);
  };

  var isItemDisabled = function isItemDisabled(item) {
    var restoredDate = new Date(year, getMonthIndex(month, props.locale), item);

    if (props.maxDate || props.minDate) {
      if (restoredDate < props.maxDate) return false;
      if (restoredDate > props.maxDate) return true;
      if (restoredDate > props.minDate) return false;
      if (restoredDate < props.minDate) return true;
    }

    if (props.disabledDates) {
      var _iterator3 = _createForOfIteratorHelper(props.disabledDates),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var i = _step3.value;
          if (isTwoDatesEqual(i, restoredDate)) return true;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }

    return false;
  };

  var dateClass = function dateClass(item) {
    var result = '';
    if (!item) result = 'none';
    if (isItemDisabled(item)) result += ' disabled';
    if (!props.hideWeekend && item && (new Date(year, getMonthIndex(month, props.locale), item).getDay() === 6 || new Date(year, getMonthIndex(month, props.locale), item).getDay() === 0)) result += ' weekend';
    if (isItemToday(item) && !props.hideCurrentDay && !isDateHoliday(new Date(year, getMonthIndex(month, props.locale), item))) result += ' today';
    if (isItemActive(item) && !isDateHoliday(new Date(year, getMonthIndex(month, props.locale), item))) result += ' active';else if (item === today && !props.hideCurrentDay && isDateHoliday(new Date(year, getMonthIndex(month, props.locale), item))) result += ' active holiday';else if (item !== today && isDateHoliday(new Date(year, getMonthIndex(month, props.locale), item))) result += ' holiday';
    return result ? result.trim() : null;
  };

  var handleDateClick = function handleDateClick(item) {
    if (props.onDate && item && !isItemDisabled(item)) props.onDate(new Date(year, getMonthIndex(month, props.locale), item));
  };

  var prepareMonth = function prepareMonth() {
    var monthFirstDayInWeek = new Date(year, getMonthIndex(month, props.locale), 1).getDay();
    var date = 1;
    var rows = [];

    if (!props.weekStartsSunday) {
      monthFirstDayInWeek = monthFirstDayInWeek - 1;
      monthFirstDayInWeek = monthFirstDayInWeek === -1 ? 6 : monthFirstDayInWeek;
    }

    for (var i = 0; i < 6; i++) {
      var cells = [];

      for (var j = 0; j < 7; j++) {
        if (i === 0 && j < monthFirstDayInWeek) {
          cells.push('');
        } else if (date > daysInMonth(getMonthIndex(month, props.locale) + 1, year)) {
          break;
        } else {
          cells.push(date);
          date++;
        }
      }

      rows.push({
        week: i,
        days: cells
      });
    }

    return /*#__PURE__*/React.createElement(React.Fragment, null, rows.map(function (item, iter) {
      return /*#__PURE__*/React.createElement("tr", {
        key: iter
      }, item.days.map(function (item, index) {
        return /*#__PURE__*/React.createElement("td", {
          key: index,
          onClick: function onClick() {
            return handleDateClick(item);
          },
          className: dateClass(item),
          name: item
        }, item, /*#__PURE__*/React.createElement("div", {
          className: "rui-calendar__events"
        }, hasDateEvent(new Date(year, getMonthIndex(month, props.locale), item)) && hasDateEvent(new Date(year, getMonthIndex(month, props.locale), item)).items.map(function (event, iter) {
          return /*#__PURE__*/React.createElement(PopOver, {
            key: iter,
            trigger: props.popOverTrigger ? props.popOverTrigger : 'hover',
            dark: props.dark,
            title: event.title,
            content: event.event
          }, /*#__PURE__*/React.createElement("div", {
            style: {
              backgroundColor: event.color
            },
            className: "rui-calendar__event"
          }));
        })));
      }));
    }));
  };

  var handleNext = function handleNext() {
    if (getMonthIndex(month, props.locale) < 11) {
      setMonth(getCurrentMonth(props.locale, getMonthIndex(month, props.locale) + 1));
    } else {
      setMonth(getCurrentMonth(props.locale, 0));
      setYear(year + 1);
    }
  };

  var handlePrev = function handlePrev() {
    if (getMonthIndex(month, props.locale) > 0) {
      setMonth(getCurrentMonth(props.locale, getMonthIndex(month, props.locale) - 1));
    } else {
      setMonth(getCurrentMonth(props.locale, 11));
      setYear(year - 1);
    }
  };

  useEffect(function () {
    setMonth(getInitialMonth());
  }, [props.locale]);
  return /*#__PURE__*/React.createElement("div", {
    className: componentClass(),
    style: {
      width: props.width
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "rui-calendar__header"
  }, /*#__PURE__*/React.createElement(Button, {
    icon: /*#__PURE__*/React.createElement(Icon, {
      name: "chevron-back"
    }),
    light: !props.dark,
    dark: props.dark,
    size: props.size,
    onClick: handlePrev
  }), /*#__PURE__*/React.createElement("div", {
    className: "rui-calendar__title"
  }, /*#__PURE__*/React.createElement("span", null, month), /*#__PURE__*/React.createElement(Select, {
    items: years(props.limit ? props.limit : 15, props.onlyPast),
    width: 80,
    borderType: props.selectBorderType,
    color: props.color ? props.color : 'primary',
    value: year,
    maxHeight: 300,
    dark: props.dark,
    size: props.size,
    className: "rui-year ml-10",
    onChange: function onChange(v) {
      return setYear(v);
    }
  })), /*#__PURE__*/React.createElement(Button, {
    icon: /*#__PURE__*/React.createElement(Icon, {
      name: "chevron-next"
    }),
    light: !props.dark,
    dark: props.dark,
    size: props.size,
    onClick: handleNext
  })), /*#__PURE__*/React.createElement("table", {
    className: "rui-calendar__body"
  }, /*#__PURE__*/React.createElement("thead", null, /*#__PURE__*/React.createElement("tr", null, getCurrentWeek(props.locale, props.weekStartsSunday).map(function (item, index) {
    return /*#__PURE__*/React.createElement("th", {
      key: index
    }, props.shortWeekName ? shortWeekName(item) : item);
  }))), /*#__PURE__*/React.createElement("tbody", null, prepareMonth())), /*#__PURE__*/React.createElement("div", {
    className: "rui-calendar__footer"
  }));
};

export default Calendar;