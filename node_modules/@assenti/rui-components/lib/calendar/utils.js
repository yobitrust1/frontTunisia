import _createForOfIteratorHelper from "@babel/runtime/helpers/esm/createForOfIteratorHelper";
export var monthesKz = ['Каңтар', 'Ақпан', 'Наурыз', 'Сәуір', 'Мамыр', 'Маусым', 'Шілде', 'Тамыз', 'Қыркүйек', 'Қазан', 'Қараша', 'Желтоқсан'];
export var monthesRu = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];
export var monthesEn = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
export var monthesFr = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];
export var weekKz = ['Дүйсенбі', 'Сейсенбі', 'Сәрсенбі', 'Бейсенбі', 'Жұма', 'Сенбі', 'Жексенбі'];
export var weekRu = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье'];
export var weekEn = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
export var weekFr = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'];
export var daysInMonth = function daysInMonth(month, year) {
  return new Date(year, month, 0).getDate();
};
export var shortWeekName = function shortWeekName(name) {
  return name.slice(0, 3);
};
export var getCurrentMonth = function getCurrentMonth(lang, monthIndex) {
  switch (lang) {
    case 'ru':
      return monthesRu[monthIndex];

    case 'kz':
      return monthesKz[monthIndex];

    case 'fr':
      return monthesFr[monthIndex];

    default:
      return monthesEn[monthIndex];
  }
};
export var getMonthIndex = function getMonthIndex(month, lang) {
  var index = 0;

  switch (lang) {
    case 'ru':
      var _iterator = _createForOfIteratorHelper(monthesRu),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var item = _step.value;
          if (item === month) return index;
          index++;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      break;

    case 'kz':
      var _iterator2 = _createForOfIteratorHelper(monthesKz),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _item = _step2.value;
          if (_item === month) return index;
          index++;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      break;

    case 'fr':
      var _iterator3 = _createForOfIteratorHelper(monthesFr),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _item2 = _step3.value;
          if (_item2 === month) return index;
          index++;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      break;

    default:
      var _iterator4 = _createForOfIteratorHelper(monthesEn),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _item3 = _step4.value;
          if (_item3 === month) return index;
          index++;
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      break;
  }
};
export var getCurrentWeek = function getCurrentWeek(lang, fromSunday) {
  if (fromSunday) {
    switch (lang) {
      case 'ru':
        var weekRuFromSunday = weekRu.map(function (item) {
          return item;
        });
        weekRuFromSunday.pop();
        weekRuFromSunday.unshift('Воскресенье');
        return weekRuFromSunday;

      case 'kz':
        var weekKzFromSunday = weekKz.map(function (item) {
          return item;
        });
        weekKzFromSunday.pop();
        weekKzFromSunday.unshift('Жексенбі');
        return weekKzFromSunday;

      case 'fr':
        var weekFrFromSunday = weekKz.map(function (item) {
          return item;
        });
        weekFrFromSunday.pop();
        weekFrFromSunday.unshift('Dimanche');
        return weekFrFromSunday;

      default:
        var weekEnFromSunday = weekEn.map(function (item) {
          return item;
        });
        weekEnFromSunday.pop();
        weekEnFromSunday.unshift('Sunday');
        return weekEnFromSunday;
    }
  } else {
    switch (lang) {
      case 'ru':
        return weekRu;

      case 'kz':
        return weekKz;

      case 'fr':
        return weekFr;

      default:
        return weekEn;
    }
  }
};
export var years = function years(limit, onlyPast) {
  var current = new Date().getFullYear();
  var years = [];

  if (!onlyPast) {
    for (var i = current + limit; i > current; i--) {
      years.push(i);
    }

    for (var _i = 0; _i <= limit; _i++) {
      years.push(current - _i);
    }
  } else {
    for (var _i2 = 0; _i2 <= limit; _i2++) {
      years.push(current - _i2);
    }
  }

  return years;
};
export var monthes = function monthes(lang) {
  switch (lang) {
    case 'ru':
      return monthesRu;

    case 'kz':
      return monthesKz;

    case 'fr':
      return monthesFr;

    default:
      return monthesEn;
  }
};