import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _createForOfIteratorHelper from "@babel/runtime/helpers/esm/createForOfIteratorHelper";
import React, { useState } from 'react';
import { Empty } from '../icon/icons/index';
import { Checkbox, Pagination, Icon, InputField } from '../index';
import { compare, strinfigyClassObject } from '../utils';

var makeSortableHeaders = function makeSortableHeaders(headers) {
  var sortableHeaders = [];

  var _iterator = _createForOfIteratorHelper(headers),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var item = _step.value;
      sortableHeaders.push({
        name: item,
        sort: 'asc'
      });
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return sortableHeaders;
};

var Table = function Table(props) {
  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      selected = _useState2[0],
      setSelected = _useState2[1];

  var _useState3 = useState(props.currentPage ? props.currentPage : 1),
      _useState4 = _slicedToArray(_useState3, 2),
      currentPage = _useState4[0],
      setCurrentPage = _useState4[1];

  var _useState5 = useState(props.perPage ? props.perPage : 10),
      _useState6 = _slicedToArray(_useState5, 2),
      perPage = _useState6[0],
      setPerPage = _useState6[1];

  var _useState7 = useState(props.sortable ? 'asc' : ''),
      _useState8 = _slicedToArray(_useState7, 2),
      sortType = _useState8[0],
      setSortType = _useState8[1];

  var _useState9 = useState(0),
      _useState10 = _slicedToArray(_useState9, 2),
      colIndex = _useState10[0],
      setColIndex = _useState10[1];

  var _useState11 = useState(''),
      _useState12 = _slicedToArray(_useState11, 2),
      search = _useState12[0],
      setSearch = _useState12[1];

  var classNameContainer = {
    name: 'rui-table-container',
    dark: props.dark ? 'dark' : '',
    color: props.color && props.color !== 'default' ? props.color : '',
    paginationPosition: props.paginationPosition ? props.paginationPosition : '',
    className: props.className ? props.className : ''
  };
  var className = {
    name: 'rui-table',
    stickyHead: props.stickyHead ? 'sticky' : '',
    alignment: props.alignment && props.alignment !== 'left' ? props.alignment : '',
    headerColor: props.color ? props.color : '',
    dark: props.dark ? 'dark' : '',
    bordered: props.bordered ? 'bordered' : '',
    grid: props.grid ? 'grid' : '',
    empty: props.items.length === 0 ? 'empty' : '',
    noHover: props.noHover ? 'no-hover' : '',
    stripped: props.stripped ? 'stripped' : ''
  };

  var handleColumnSort = function handleColumnSort(colIndex, sortType) {
    setColIndex(colIndex);
    setSortType(sortType);
  };

  var isSelected = function isSelected(_item) {
    var result = false;

    var _iterator2 = _createForOfIteratorHelper(selected),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var item = _step2.value;
        if (item[props.selectKey] === _item[props.selectKey]) return true;
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return result;
  };

  var onSelect = function onSelect(item) {
    for (var i = 0; i < selected.length; i++) {
      if (selected[i][props.selectKey] === item[props.selectKey]) {
        if (i === 0) {
          setSelected(selected.slice(1));
          props.onSelect(selected.slice(1));
        } else if (i === selected.length - 1) {
          setSelected(selected.slice(0, -1));
          props.onSelect(selected.slice(0, -1));
        } else if (i > 0) {
          setSelected([].concat(_toConsumableArray(selected.slice(0, i)), _toConsumableArray(selected.slice(i + 1))));
          props.onSelect([].concat(_toConsumableArray(selected.slice(0, i)), _toConsumableArray(selected.slice(i + 1))));
        }

        return;
      }
    }

    setSelected([].concat(_toConsumableArray(selected), [item]));
    props.onSelect([].concat(_toConsumableArray(selected), [item]));
  };

  var isAllChecked = function isAllChecked() {
    if (selected.length === getItems().length) return true;
    return false;
  };

  var onSelectAll = function onSelectAll() {
    if (selected.length > 0) {
      setSelected([]);
      props.onSelect([]);
    } else {
      setSelected(getItems());
      props.onSelect(getItems());
    }
  };

  var isIndexedTable = function isIndexedTable() {
    if (props.index) return /*#__PURE__*/React.createElement("th", {
      className: props.searchable ? 'indexed bordered' : 'indexed'
    }, props.indexSign ? props.indexSign : '#');
  };

  var isCheckbox = function isCheckbox() {
    if (props.checkbox) {
      return /*#__PURE__*/React.createElement("th", {
        style: {
          maxWidth: 40,
          width: 40
        }
      }, /*#__PURE__*/React.createElement(Checkbox, {
        color: props.color ? props.color : '',
        onChange: function onChange() {
          return props.checkbox ? onSelectAll() : {};
        },
        checked: isAllChecked()
      }));
    }
  };

  var isControls = function isControls() {
    if (props.controls) return /*#__PURE__*/React.createElement("th", null);
  };

  var isSortable = function isSortable(item, index) {
    if (props.sortable) {
      return /*#__PURE__*/React.createElement(Icon, {
        className: "ml-8 cursor-pointer",
        name: sortType === 'desc' ? 'sort-descending' : 'sort-ascending',
        onClick: function onClick() {
          item.sort = item.sort === 'asc' ? 'desc' : 'asc';
          handleColumnSort(index, item.sort);
        },
        color: props.color && props.color !== 'default' ? '#fff' : '',
        size: 16
      });
    }
  };

  var prepareHeaders = function prepareHeaders() {
    return /*#__PURE__*/React.createElement("tr", null, isIndexedTable(), isCheckbox(), makeSortableHeaders(props.headers).map(function (item, index) {
      return /*#__PURE__*/React.createElement("th", {
        key: index,
        className: props.searchable ? 'bordered' : ''
      }, /*#__PURE__*/React.createElement("div", {
        className: "row align-center"
      }, item.name, isSortable(item, index)));
    }), isControls());
  };

  var getItemKey = function getItemKey() {
    return props.itemTitles[colIndex];
  };

  var getItems = function getItems() {
    if (search) {
      if (props.pagination && props.sortable) {
        return props.items.slice(perPage * currentPage - perPage, perPage * currentPage).sort(function (a, b) {
          return compare(a, b, getItemKey(), sortType);
        }).filter(function (item) {
          return item[props.searchKey].toLowerCase().includes(search.toLowerCase());
        });
      } else if (!props.pagination && props.sortable) {
        return props.items.sort(function (a, b) {
          return compare(a, b, getItemKey(), sortType);
        }).filter(function (item) {
          return item[props.searchKey].toLowerCase().includes(search.toLowerCase());
        });
      } else if (props.pagination && !props.sortable) {
        return props.items.slice(perPage * currentPage - perPage, perPage * currentPage).sort(function (a, b) {
          return compare(a, b, getItemKey(), sortType);
        }).filter(function (item) {
          return item[props.searchKey].toLowerCase().includes(search.toLowerCase());
        });
      } else {
        return props.items.filter(function (item) {
          return item[props.searchKey].toLowerCase().includes(search.toLowerCase());
        });
      }
    } else {
      if (props.pagination && props.sortable) {
        return props.items.slice(perPage * currentPage - perPage, perPage * currentPage).sort(function (a, b) {
          return compare(a, b, getItemKey(), sortType);
        });
      } else if (!props.pagination && props.sortable) {
        return props.items.sort(function (a, b) {
          return compare(a, b, getItemKey(), sortType);
        });
      } else if (props.pagination && !props.sortable) {
        return props.items.slice(perPage * currentPage - perPage, perPage * currentPage).sort(function (a, b) {
          return compare(a, b, getItemKey(), sortType);
        });
      } else {
        return props.items;
      }
    }
  };

  var handleKeyUp = function handleKeyUp(e) {
    if (e.key === 'Escape') setSearch('');
  };

  return /*#__PURE__*/React.createElement("div", {
    className: strinfigyClassObject(classNameContainer),
    ref: props.tableRef,
    style: props.style,
    id: props.id ? props.id : ''
  }, /*#__PURE__*/React.createElement("div", {
    className: "rui-table-header"
  }, props.tableTitle ? /*#__PURE__*/React.createElement("div", {
    className: "rui-table-title"
  }, props.tableTitle) : null, props.searchable ? /*#__PURE__*/React.createElement(InputField, {
    color: props.color ? props.color : 'primary',
    prefix: /*#__PURE__*/React.createElement(Icon, {
      name: "search"
    }),
    value: search,
    className: "my-5",
    dark: props.dark,
    onKeyUp: handleKeyUp,
    placeholder: props.searchPlaceholder ? props.searchPlaceholder : 'Search',
    onChange: function onChange(e) {
      return setSearch(e.target.value);
    }
  }) : ''), /*#__PURE__*/React.createElement("table", {
    className: strinfigyClassObject(className)
  }, /*#__PURE__*/React.createElement("thead", null, prepareHeaders()), /*#__PURE__*/React.createElement("tbody", null, getItems().map(function (item, index) {
    return /*#__PURE__*/React.createElement("tr", {
      key: index
    }, props.index ? /*#__PURE__*/React.createElement("td", {
      className: "indexed"
    }, index + 1) : null, props.checkbox ? /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement(Checkbox, {
      checked: isSelected(item),
      color: props.color ? props.color : '',
      onChange: function onChange() {
        return onSelect(item);
      }
    })) : null, props.itemTitles.map(function (title, iter) {
      return /*#__PURE__*/React.createElement("td", {
        key: iter
      }, item[title]);
    }), props.controls ? /*#__PURE__*/React.createElement("td", null, props.controls(item)) : null);
  }))), props.items.length === 0 && !props.loading && /*#__PURE__*/React.createElement("div", {
    className: "rui-table-placeholder"
  }, /*#__PURE__*/React.createElement(Empty, null)), props.pagination ? /*#__PURE__*/React.createElement(Pagination, {
    onChange: function onChange(page) {
      return setCurrentPage(page);
    },
    perPageVariants: props.perPageVariants,
    perPage: perPage,
    dense: props.paginationDense,
    dark: props.dark,
    perPageText: props.perPageText,
    onPerPageSelect: function onPerPageSelect(value) {
      return setPerPage(value);
    },
    itemsCount: props.itemsTotal ? props.itemsTotal : 0,
    color: props.color && props.color !== 'default' ? props.color : '',
    size: props.paginationSize ? props.paginationSize : '',
    current: props.currentPage ? props.currentPage : 1,
    borderType: props.paginationBorderType
  }) : null);
};

export default Table;