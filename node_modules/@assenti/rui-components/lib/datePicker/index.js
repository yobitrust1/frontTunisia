import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState, useRef, useEffect } from 'react';
import { Dropdown, Icon, InputField, Calendar, Modal } from '../index';

var DatePicker = function DatePicker(props) {
  var container = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      visible = _useState2[0],
      setVisible = _useState2[1];

  var handleClear = function handleClear() {
    if (props.onClear) {
      props.onClear();
    }
  };

  var handleClick = function handleClick(e) {
    if (container.current.contains(e.target)) return;
    setVisible(false);
  };

  useEffect(function () {
    document.addEventListener('mousedown', handleClick, true);
    return function () {
      document.removeEventListener("mousedown", handleClick, true);
    };
  }, []);
  return /*#__PURE__*/React.createElement("div", {
    className: "rui-date-picker ".concat(props.className).trim(),
    ref: container
  }, !props.inModal ? /*#__PURE__*/React.createElement(Dropdown, {
    closeManaged: true,
    dark: props.dark,
    visible: visible,
    trigger: /*#__PURE__*/React.createElement(InputField, {
      readOnly: true,
      size: props.size,
      style: {
        width: props.width ? props.width : ''
      },
      label: props.label,
      hint: props.hint,
      dark: props.dark,
      hintColor: props.hintColor,
      clearable: props.clearable,
      onFocus: function onFocus() {
        return setVisible(true);
      },
      onClear: handleClear,
      required: props.required,
      placeholder: props.placeholder,
      prefix: /*#__PURE__*/React.createElement(Icon, {
        name: "calendar-month"
      }),
      value: props.value
    })
  }, /*#__PURE__*/React.createElement("div", {
    className: "rui-date-picker__content"
  }, /*#__PURE__*/React.createElement(Calendar, {
    shortWeekName: true,
    active: props.active,
    hideWeekend: props.hideWeekend,
    hideCurrentDay: props.hideCurrentDay,
    onDate: function onDate(date) {
      props.onDate(date);
      setVisible(false);
    },
    events: props.events,
    selectBorderType: props.selectBorderType,
    maxDate: props.maxDate,
    minDate: props.minDate,
    disabledDates: props.disabledDates,
    holidays: props.holidays,
    weekStartsSunday: props.weekStartsSunday,
    dark: props.dark,
    limit: props.limit,
    onlyPast: props.onlyPast,
    locale: props.locale,
    color: props.color
  }))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InputField, {
    readOnly: true,
    size: props.size,
    style: {
      width: props.width ? props.width : ''
    },
    label: props.label,
    hint: props.hint,
    dark: props.dark,
    hintColor: props.hintColor,
    clearable: props.clearable,
    onClear: handleClear,
    required: props.required,
    placeholder: props.placeholder,
    onFocus: function onFocus() {
      return setVisible(true);
    },
    prefix: /*#__PURE__*/React.createElement(Icon, {
      name: "calendar-month"
    }),
    value: props.value
  }), /*#__PURE__*/React.createElement(Modal, {
    width: 300,
    centered: true,
    closable: true,
    header: props.modalTitle,
    visible: visible,
    onClose: function onClose() {
      return setVisible(false);
    }
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      height: 240
    }
  }, /*#__PURE__*/React.createElement(Calendar, {
    width: 300,
    shortWeekName: true,
    active: props.active,
    hideWeekend: props.hideWeekend,
    hideCurrentDay: props.hideCurrentDay,
    onDate: function onDate(date) {
      props.onDate(date);
      setVisible(false);
    },
    events: props.events,
    selectBorderType: props.selectBorderType,
    maxDate: props.maxDate,
    minDate: props.minDate,
    disabledDates: props.disabledDates,
    holidays: props.holidays,
    weekStartsSunday: props.weekStartsSunday,
    dark: props.dark,
    limit: props.limit,
    onlyPast: props.onlyPast,
    locale: props.locale,
    color: props.color
  })))));
};

export default DatePicker;