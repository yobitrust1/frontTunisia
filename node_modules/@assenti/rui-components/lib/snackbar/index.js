import React from 'react';
import { render, unmountComponentAtNode } from 'react-dom';

var SnackbarItem = function SnackbarItem(props) {
  var getColor = function getColor() {
    if (props.type === 'success') return '#1aaa55';else if (props.type === 'error') return '#f44336';else if (props.type === 'info') return '#42a5f5';else return props.dark ? '#ddd' : '#3d3d3d';
  };

  var getRadius = function getRadius() {
    if (props.borderType === 'rounded') return '60px';
    if (props.borderType === 'tile') return '0';else return '4px';
  };

  return /*#__PURE__*/React.createElement("div", {
    className: "rui-snackbar-message-container"
  }, /*#__PURE__*/React.createElement("div", {
    className: "rui-snackbar ".concat(props.type ? props.type : '').trim()
  }, props.message, props.controls), /*#__PURE__*/React.createElement("style", {
    jsx: "true"
  }, "\n                @keyframes SlideInOut {\n                    0%{\n                        transform: translateY(0);\n                        opacity: .3;\n                    }\n                    ".concat(props.transitionPercentage, "% {\n                        transform: translateY(-20px);\n                        opacity: 1;\n                    }\n                    ").concat(100 - props.transitionPercentage, "% {\n                        transform: translateY(-20px);\n                        opacity: 1;\n                    }\n                    100% {\n                        transform: translateY(0px);\n                        opacity: .3;\n                    }\n                }\n                @media (max-width: 529px) {\n                    .rui-snackbar-message-container {\n                        max-width: 90%;\n                        width: 90%;\n                    }\n                }\n                .rui-snackbar-container {\n                    position: fixed;\n                    width: 100%;\n                    bottom: 16px;\n                    left: 0px;\n                    z-index: 9999;\n                }\n                .rui-snackbar {\n                    display: flex;\n                    align-items: center;\n                    justify-content: ").concat(props.controls ? 'space-between' : 'center', ";\n                    flex: 1;\n                    padding: 0 15px;\n                    border-radius: ").concat(getRadius(), ";\n                    font-size: 15px;\n                    min-height: 45px;\n                }\n                .rui-snackbar > button, div, span, i {\n                    margin-top: 0;\n                    margin-bottom: 0;\n                }\n                .rui-snackbar-message-container {\n                    color: ").concat(props.dark ? '#000' : '#fff', ";\n                    max-width: 350px;\n                    box-shadow: 0 1px 3px 0 rgba(0,0,0,.15);\n                    background-color: ").concat(getColor(), ";\n                    margin: 0px auto;\n                    border-radius: ").concat(getRadius(), ";\n                    display: flex;\n                    animation: SlideInOut ").concat(props.duration, "s ease-in-out;\n                }\n            ")));
};

export var snackbar = {
  remove: function remove() {
    var snackbarContainer = document.getElementById('rui-snackbar-container');
    if (snackbarContainer) unmountComponentAtNode(snackbarContainer);
    snackbar.currentToast = false;

    if (snackbar.timeout) {
      clearTimeout(snackbar.timeout);
      snackbar.timeout = null;
    }
  },
  currentToast: false,
  timeout: null,

  /**
   * Snackbar options description
   * @typedef {Object} SnackbarOptions
   * @property {string} type success | error | info
   * @property {string} borderType tile | rounded
   * @property {boolean} dark
   * @property {any} controls
   * @property {number} duration
   */

  /**
   * message function description
   * @param {string} message
   * @param {SnackbarOptions | null} options
   */
  message: function message(_message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var duration = 5;

    if (options) {
      if (options.duration) duration = options.duration;
    }

    if (snackbar.currentToast) snackbar.remove();
    var trasitionPercentage = 0.3 * (100 / duration);
    render( /*#__PURE__*/React.createElement(SnackbarItem, {
      message: _message,
      slideIn: true,
      borderType: options === null || options === void 0 ? void 0 : options.borderType,
      type: options === null || options === void 0 ? void 0 : options.type,
      dark: options === null || options === void 0 ? void 0 : options.dark,
      controls: options === null || options === void 0 ? void 0 : options.controls,
      transitionPercentage: trasitionPercentage,
      duration: duration
    }), document.getElementById('rui-snackbar-container'));
    snackbar.currentToast = true;
    snackbar.timeout = setTimeout(snackbar.remove, duration * 1000);
  }
};