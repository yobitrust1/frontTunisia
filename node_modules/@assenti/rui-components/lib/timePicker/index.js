import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState } from 'react';
import { Dropdown, Icon, List, InputField, Modal } from '../index';

var hours = function hours() {
  var hours = [];

  for (var i = 0; i < 24; i++) {
    if (i.toString().length < 2) {
      hours.push("0".concat(i));
    } else {
      hours.push(i.toString());
    }
  }

  return hours;
};

var minutes = function minutes() {
  var minutes = [];

  for (var i = 0; i < 60; i++) {
    if (i.toString().length < 2) {
      minutes.push("0".concat(i));
    } else {
      minutes.push(i.toString());
    }
  }

  return minutes;
};

var headers = function headers(locale) {
  switch (locale) {
    case 'kz':
      return ['Сағ', 'Мин', 'Сек'];

    case 'ru':
      return ['Час', 'Мин', 'Сек'];

    default:
      return ['HH', 'MM', 'SS'];
  }
};

var TimePicker = function TimePicker(props) {
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      visible = _useState2[0],
      setVisible = _useState2[1];

  var _useState3 = useState('00'),
      _useState4 = _slicedToArray(_useState3, 2),
      hh = _useState4[0],
      setHH = _useState4[1];

  var _useState5 = useState('00'),
      _useState6 = _slicedToArray(_useState5, 2),
      mm = _useState6[0],
      setMM = _useState6[1];

  var _useState7 = useState('00'),
      _useState8 = _slicedToArray(_useState7, 2),
      ss = _useState8[0],
      setSS = _useState8[1];

  var placeholder = function placeholder() {
    if (props.noSeconds) {
      return props.placeholder ? props.placeholder : '00:00';
    } else {
      return props.placeholder ? props.placeholder : '00:00:00';
    }
  };

  var handleClick = function handleClick(value, type) {
    if (props.noSeconds) {
      if (type === 'hh') {
        setHH(value);
        props.onChange("".concat(value, ":").concat(mm));
      } else if (type === 'mm') {
        setMM(value);
        props.onChange("".concat(hh, ":").concat(value));
      }
    } else {
      if (type === 'hh') {
        setHH(value);
        props.onChange("".concat(value, ":").concat(mm, ":").concat(ss));
      } else if (type === 'mm') {
        setMM(value);
        props.onChange("".concat(hh, ":").concat(value, ":").concat(ss));
      } else if (type === 'ss') {
        setSS(value);
        props.onChange("".concat(hh, ":").concat(mm, ":").concat(value));
      }
    }
  };

  var handleClear = function handleClear() {
    if (props.onClear) {
      props.onClear();
      setHH('00');
      setMM('00');
      setSS('00');
    }
  };

  return /*#__PURE__*/React.createElement("div", {
    className: "rui-timepicker ".concat(props.className)
  }, !props.inModal ? /*#__PURE__*/React.createElement(Dropdown, {
    closeManaged: true,
    dark: props.dark,
    visible: visible,
    trigger: /*#__PURE__*/React.createElement(InputField, {
      readOnly: true,
      size: props.size,
      style: {
        width: props.width
      },
      label: props.label,
      hint: props.hint,
      dark: props.dark,
      hintColor: props.hintColor,
      clearable: props.clearable,
      onClear: handleClear,
      required: props.required,
      placeholder: placeholder(),
      onFocus: function onFocus() {
        return setVisible(true);
      },
      onBlur: function onBlur() {
        return setVisible(false);
      },
      prefix: /*#__PURE__*/React.createElement(Icon, {
        name: "clock-outline"
      }),
      value: props.value
    })
  }, /*#__PURE__*/React.createElement("div", {
    className: "rui-timepicker__content"
  }, /*#__PURE__*/React.createElement(List, {
    className: "col",
    header: headers(props.locale)[0]
  }, hours().map(function (item, index) {
    return /*#__PURE__*/React.createElement(List.Item, {
      hover: true,
      isActiveItem: item === hh,
      onClick: function onClick() {
        return handleClick(item, 'hh');
      },
      key: index,
      item: item
    });
  })), /*#__PURE__*/React.createElement(List, {
    className: "col",
    header: headers(props.locale)[1]
  }, minutes().map(function (item, index) {
    return /*#__PURE__*/React.createElement(List.Item, {
      hover: true,
      isActiveItem: item === mm,
      onClick: function onClick() {
        return handleClick(item, 'mm');
      },
      key: index,
      item: item
    });
  })), !props.noSeconds && /*#__PURE__*/React.createElement(List, {
    className: "col",
    header: headers(props.locale)[2]
  }, minutes().map(function (item, index) {
    return /*#__PURE__*/React.createElement(List.Item, {
      hover: true,
      isActiveItem: item === ss,
      onClick: function onClick() {
        return handleClick(item, 'ss');
      },
      key: index,
      item: item
    });
  })))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InputField, {
    readOnly: true,
    size: props.size,
    style: {
      width: props.width
    },
    label: props.label,
    hint: props.hint,
    dark: props.dark,
    hintColor: props.hintColor,
    clearable: props.clearable,
    onClear: handleClear,
    required: props.required,
    placeholder: placeholder(),
    onFocus: function onFocus() {
      return setVisible(true);
    },
    prefix: /*#__PURE__*/React.createElement(Icon, {
      name: "clock-outline"
    }),
    value: props.value
  }), /*#__PURE__*/React.createElement(Modal, {
    width: 300,
    centered: true,
    closable: true,
    header: props.modalTitle,
    visible: visible,
    onClose: function onClose() {
      return setVisible(false);
    }
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      height: 240
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "rui-timepicker__content"
  }, /*#__PURE__*/React.createElement(List, {
    className: "col",
    header: headers(props.locale)[0]
  }, hours().map(function (item, index) {
    return /*#__PURE__*/React.createElement(List.Item, {
      hover: true,
      isActiveItem: item === hh,
      onClick: function onClick() {
        return handleClick(item, 'hh');
      },
      key: index,
      item: item
    });
  })), /*#__PURE__*/React.createElement(List, {
    className: "col",
    header: headers(props.locale)[1]
  }, minutes().map(function (item, index) {
    return /*#__PURE__*/React.createElement(List.Item, {
      hover: true,
      isActiveItem: item === mm,
      onClick: function onClick() {
        return handleClick(item, 'mm');
      },
      key: index,
      item: item
    });
  })), !props.noSeconds && /*#__PURE__*/React.createElement(List, {
    className: "col",
    header: headers(props.locale)[2]
  }, minutes().map(function (item, index) {
    return /*#__PURE__*/React.createElement(List.Item, {
      hover: true,
      isActiveItem: item === ss,
      onClick: function onClick() {
        return handleClick(item, 'ss');
      },
      key: index,
      item: item
    });
  })))))));
};

export default TimePicker;