import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState } from 'react';
import { Icon, Tooltip } from '../index';

var CopyToClipboard = function CopyToClipboard(props) {
  var _useState = useState(props.defaultText ? props.defaultText : 'Copy'),
      _useState2 = _slicedToArray(_useState, 2),
      tooltip = _useState2[0],
      setTooltip = _useState2[1];

  var handleClick = function handleClick() {
    copyToClipboard(props.text);
    setTooltip("".concat(props.copiedText ? props.copiedText : 'Copied to clipboard'));
    setTimeout(function () {
      setTooltip(props.defaultText ? props.defaultText : 'Copy');
    }, 700);
  };

  var copyToClipboard = function copyToClipboard(text) {
    var el = document.createElement('textarea');
    el.value = text;
    el.setAttribute('readonly', '');
    el.style.position = 'absolute';
    el.style.left = '-9999px';
    document.body.appendChild(el);
    el.select();
    document.execCommand('copy');
    document.body.removeChild(el);
  };

  var getColor = function getColor() {
    if (props.color) {
      return props.color;
    } else {
      if (props.dark) return '#fff';else return '';
    }
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, props.noTooltip ? /*#__PURE__*/React.createElement(Icon, {
    className: props.className ? "cursor-pointer ".concat(props.className) : 'cursor-pointer',
    size: props.size ? props.size : 16,
    color: getColor(),
    name: props.icon ? props.icon : 'content-copy',
    onClick: handleClick
  }) : /*#__PURE__*/React.createElement(Tooltip, {
    tooltip: tooltip,
    position: props.tooltipPosition
  }, /*#__PURE__*/React.createElement(Icon, {
    className: props.className ? "cursor-pointer ".concat(props.className) : 'cursor-pointer',
    size: props.size ? props.size : 16,
    color: getColor(),
    name: props.icon ? props.icon : 'content-copy',
    onClick: handleClick
  })));
};

export default CopyToClipboard;