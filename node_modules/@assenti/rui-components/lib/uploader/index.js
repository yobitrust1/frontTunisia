import _regeneratorRuntime from "@babel/runtime/regenerator";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState, useRef } from 'react';
import { Icon, strinfigyClassObject, getBase64 } from '../index';
import { Empty } from '../icon/icons';

var Uploader = function Uploader(props) {
  var inputFile = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      focus = _useState2[0],
      setFocus = _useState2[1];

  var _useState3 = useState([]),
      _useState4 = _slicedToArray(_useState3, 2),
      files = _useState4[0],
      setFiles = _useState4[1];

  var className = {
    input: 'rui-input-uploader',
    dark: props.dark ? 'dark' : '',
    dropBox: props.dropBox ? 'drop-box' : '',
    className: props.className ? props.className : ''
  };
  var classNameContainer = {
    name: 'rui-input-uploader__container',
    size: props.size ? props.size : '',
    color: props.color && !props.disabled && !props.light && !props.dark ? props.color : '',
    lifted: props.lifted ? 'lifted' : '',
    borderType: props.borderType ? props.borderType : '',
    disabled: props.disabled ? 'disabled' : ''
  };

  var handleChange = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {
      var _files, promised;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              props.onChange(_toConsumableArray(e.target.files));
              _files = _toConsumableArray(e.target.files).map( /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(item) {
                  var base64;
                  return _regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return getBase64(item);

                        case 2:
                          base64 = _context.sent;
                          return _context.abrupt("return", {
                            name: item.name,
                            url: base64
                          });

                        case 4:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));

                return function (_x2) {
                  return _ref2.apply(this, arguments);
                };
              }());
              _context2.next = 4;
              return Promise.all(_files);

            case 4:
              promised = _context2.sent;
              setFiles(promised);

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function handleChange(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  var handleDelete = function handleDelete(item, index) {
    setFiles(function () {
      return files.filter(function (_item) {
        return _item.name !== item.name;
      });
    });
    props.onDelete(item.name);
  };

  var handleFocus = function handleFocus(e) {
    if (props.onFocus) props.onFocus(e);
    setFocus(true);
  };

  var handleBlur = function handleBlur(e) {
    if (props.onBlur) props.onBlur(e);
    setFocus(false);
  };

  return /*#__PURE__*/React.createElement("div", {
    className: strinfigyClassObject(className),
    style: {
      width: props.width ? props.width : ''
    }
  }, !!props.label && /*#__PURE__*/React.createElement("div", {
    className: "rui-input-uploader__label"
  }, props.label), /*#__PURE__*/React.createElement("div", {
    className: strinfigyClassObject(classNameContainer),
    style: {
      height: props.height ? props.height : ''
    }
  }, /*#__PURE__*/React.createElement(Icon, {
    name: "download",
    className: "prefix"
  }), props.dropBox ? /*#__PURE__*/React.createElement("i", {
    className: "inbox"
  }, /*#__PURE__*/React.createElement(Empty, null)) : null, props.placeholder ? /*#__PURE__*/React.createElement("label", {
    onClick: function onClick() {
      return inputFile.current.focus();
    }
  }, props.placeholder) : '', /*#__PURE__*/React.createElement("input", {
    onFocus: handleFocus,
    onBlur: handleBlur,
    ref: inputFile,
    multiple: props.multiple ? true : false,
    accept: props.accept ? props.accept : undefined,
    title: props.title,
    disabled: props.disabled,
    required: props.required,
    onChange: handleChange,
    type: "file"
  }), !props.dropBox && props.value && props.value.length > 0 ? /*#__PURE__*/React.createElement("span", null, props.value.length) : null), props.value && props.value.length > 0 && /*#__PURE__*/React.createElement("div", {
    className: props.borderType === 'rounded' ? 'rui-input-uploader__items rounded' : 'rui-input-uploader__items'
  }, files.map(function (item, index) {
    return /*#__PURE__*/React.createElement("div", {
      key: index,
      className: "rui-input-uploader__item"
    }, /*#__PURE__*/React.createElement("div", {
      className: "rui-input-uploader__item-image"
    }, /*#__PURE__*/React.createElement("div", {
      style: {
        backgroundImage: "url(".concat(item.url, ")")
      }
    }), /*#__PURE__*/React.createElement("span", null, item.name)), /*#__PURE__*/React.createElement(Icon, {
      name: "close",
      size: 18,
      onClick: function onClick() {
        return handleDelete(item, index);
      }
    }));
  })));
};

export default Uploader;