import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import React, { useState } from 'react';
import { Collapse, strinfigyClassObject } from '../index';

var ExpansionList = function ExpansionList(props) {
  var prepareItems = function prepareItems() {
    var items = props.items.map(function (item) {
      return _objectSpread(_objectSpread({}, item), {}, {
        active: false
      });
    });

    if (props.defaultOpens && props.defaultOpens.length > 0) {
      for (var i = 0; i < props.defaultOpens.length; i++) {
        items[props.defaultOpens[i]].active = true;
      }
    }

    return items;
  };

  var className = {
    name: 'rui-expansion-list',
    hover: props.hover ? 'hover' : '',
    dark: props.dark ? 'dark' : '',
    className: props.className ? props.className : ''
  };

  var _useState = useState(prepareItems()),
      _useState2 = _slicedToArray(_useState, 2),
      localItems = _useState2[0],
      setLocalItems = _useState2[1];

  var _useState3 = useState(''),
      _useState4 = _slicedToArray(_useState3, 2),
      active = _useState4[0],
      setActive = _useState4[1];

  var handleClick = function handleClick(index) {
    var updated = [];

    for (var i = 0; i < localItems.length; i++) {
      if (i === index) {
        localItems[i].active = !localItems[i].active;
        updated.push(localItems[i]);
      } else {
        localItems[i].active = false;
        updated.push(localItems[i]);
      }
    }

    setLocalItems(updated);
  };

  var getClass = function getClass(item, index) {
    if (props.accordion) return item.active ? 'active' : '';else return index === active ? 'active' : '';
  };

  return /*#__PURE__*/React.createElement("div", {
    className: strinfigyClassObject(className),
    style: {
      width: props.width ? props.width : ''
    }
  }, localItems.map(function (item, index) {
    return /*#__PURE__*/React.createElement(Collapse, {
      key: index,
      icon: props.triggerIcon ? props.triggerIcon : '',
      iconColor: props.triggerIconColor ? props.triggerIconColor : '',
      iconSize: props.iconSize ? props.iconSize : '',
      controled: props.accordion,
      visible: item.active,
      className: getClass(item, index),
      onChange: function onChange(state) {
        if (props.onItemClick) props.onItemClick(item, index);

        if (props.accordion) {
          handleClick(index);
        } else {
          if (state) setActive(index);else setActive('');
        }
      },
      title: props.titleContent(item, index)
    }, props.itemContent ? props.itemContent(item, index) : null);
  }));
};

export default ExpansionList;