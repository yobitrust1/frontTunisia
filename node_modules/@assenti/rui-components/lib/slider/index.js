import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState, useRef, useEffect } from 'react';
import { strinfigyClassObject, Button, Icon } from '../index';

var Slider = function Slider(props) {
  var childItem = useRef();
  var childItems = useRef();
  var slider = useRef();

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      move = _useState2[0],
      setMove = _useState2[1];

  var _useState3 = useState(''),
      _useState4 = _slicedToArray(_useState3, 2),
      remainder = _useState4[0],
      setRemainder = _useState4[1];

  var className = {
    name: 'rui-slider',
    slidable: props.slidable ? 'slidable' : '',
    vertical: props.vertical ? 'vertical' : '',
    className: props.className ? props.className : ''
  };

  var handlePrev = function handlePrev() {
    var length = props.vertical ? childItem.current.offsetHeight : childItem.current.offsetWidth;
    setMove(move + length);
    setRemainder(remainder + Math.abs(length));
  };

  var handleNext = function handleNext() {
    if (remainder >= 0) {
      var length = props.vertical ? childItem.current.offsetHeight : childItem.current.offsetWidth;
      setMove(move - length);
      setRemainder(remainder - Math.abs(length));
    }
  };

  var getSliderLength = function getSliderLength() {
    if (props.length && props.vertical) {
      return {
        height: props.length ? props.length : ''
      };
    } else if (props.length && !props.vertical) {
      return {
        width: props.length ? props.length : ''
      };
    }
  };

  useEffect(function () {
    if (slider.current && childItems.current) {
      var itemsLength = props.vertical ? childItems.current.offsetHeight : childItems.current.offsetWidth;
      var sliderLength = props.vertical ? slider.current.offsetHeight : slider.current.offsetWidth;
      setRemainder(itemsLength - sliderLength);
    }
  }, []);
  return /*#__PURE__*/React.createElement("div", {
    className: strinfigyClassObject(className),
    style: getSliderLength(),
    ref: slider
  }, !props.slidable && /*#__PURE__*/React.createElement(Button, {
    onClick: handlePrev,
    disabled: move === 0,
    dark: props.dark,
    className: "rui-slider-prev-btn",
    icon: /*#__PURE__*/React.createElement(Icon, {
      name: props.vertical ? 'chevron-up' : 'chevron-back'
    })
  }), /*#__PURE__*/React.createElement("div", {
    className: "rui-slider-items",
    style: {
      transform: props.vertical ? "translateY(".concat(move, "px)") : "translateX(".concat(move, "px)")
    },
    ref: childItems
  }, props.items.map(function (item, index) {
    return /*#__PURE__*/React.createElement("div", {
      key: index,
      className: "rui-slider-item",
      ref: childItem,
      onClick: function onClick() {
        return props.onItemClick ? props.onItemClick(item, index) : {};
      }
    }, props.render(item, index));
  })), !props.slidable ? /*#__PURE__*/React.createElement(Button, {
    onClick: handleNext,
    disabled: remainder <= 0,
    dark: props.dark,
    className: "rui-slider-next-btn",
    icon: /*#__PURE__*/React.createElement(Icon, {
      name: props.vertical ? 'chevron-down' : 'chevron-next'
    })
  }) : null);
};

export default Slider;