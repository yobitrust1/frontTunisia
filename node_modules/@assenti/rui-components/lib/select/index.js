import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _createForOfIteratorHelper from "@babel/runtime/helpers/esm/createForOfIteratorHelper";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState, useRef, useEffect } from 'react';
import { Icon, InputField, Dropdown, List, Tag } from '../index';
import { strinfigyClassObject } from '../utils';

var Select = function Select(props) {
  var checkboxesContainer = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      menu = _useState2[0],
      setMenu = _useState2[1];

  var _useState3 = useState([]),
      _useState4 = _slicedToArray(_useState3, 2),
      selected = _useState4[0],
      setSelected = _useState4[1];

  var _useState5 = useState(-1),
      _useState6 = _slicedToArray(_useState5, 2),
      index = _useState6[0],
      setIndex = _useState6[1];

  var _useState7 = useState(false),
      _useState8 = _slicedToArray(_useState7, 2),
      focus = _useState8[0],
      setFocus = _useState8[1];

  var _useState9 = useState(''),
      _useState10 = _slicedToArray(_useState9, 2),
      search = _useState10[0],
      setSearch = _useState10[1];

  var className = {
    name: 'rui-select',
    maxHeight: props.maxHeight ? 'max-height' : '',
    className: props.className ? props.className : ''
  };
  var classNameMultiple = {
    name: 'rui-select__multiple-items',
    size: props.size && props.size !== 'default' ? props.size : '',
    disabled: props.disabled ? 'disabled' : '',
    color: props.color ? props.color : 'primary',
    border: props.borderType && props.borderType !== 'default' ? props.borderType : ''
  };

  var handleClick = function handleClick(e) {
    if (checkboxesContainer.current && checkboxesContainer.current.contains(e.target)) return;
    setMenu(false);
  };

  useEffect(function () {
    document.addEventListener('mousedown', handleClick, true);
    return function () {
      document.removeEventListener("mousedown", handleClick, true);
    };
  }, []);

  var isSelected = function isSelected(item) {
    var _iterator = _createForOfIteratorHelper(selected),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var i = _step.value;
        if (i === item) return true;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return false;
  };

  var isMultiple = function isMultiple() {
    if (props.multiple && props.childrenKey) return true;else if (props.multiple && !props.childrenKey) return true;else return false;
  };

  var getItem = function getItem(item) {
    return props.itemKey ? item[props.itemKey] : item;
  };

  var handleItemClick = function handleItemClick(item) {
    if (isMultiple()) {
      if (isSelected(getItem(item))) {
        setSelected(function () {
          return selected.filter(function (i) {
            return i !== getItem(item);
          });
        });
        props.onSelect(getItem(item), selected.filter(function (i) {
          return i !== getItem(item);
        }));
      } else {
        setSelected([].concat(_toConsumableArray(selected), [getItem(item)]));
        props.onSelect(getItem(item), [].concat(_toConsumableArray(selected), [getItem(item)]));
      }

      setTimeout(function () {
        setFocus(false);
      });
    } else if (props.childrenKey && !props.value) {} else {
      if (props.onChange) {
        props.onChange(props.returnObject ? item : getItem(item));
      }

      setTimeout(function () {
        setMenu(false);
      });
    }
  };

  var getActiveItem = function getActiveItem(item) {
    if (!props.childrenKey && !props.multiple) {
      if (props.itemKey) {
        return item[props.itemKey] === props.value;
      } else {
        return item === props.value;
      }
    } else if (isMultiple()) {
      return isSelected(props.itemKey ? item[props.itemKey] : item);
    } else {
      return item[props.childrenKey].includes(props.value);
    }
  };

  var filteredItems = function filteredItems() {
    if (search) {
      return props.items.filter(function (item) {
        return props.itemKey ? item[props.itemKey].toLowerCase().includes(search.toLowerCase()) : item.toLowerCase().includes(search.toLowerCase());
      });
    } else {
      return props.items;
    }
  };

  var handleKeyUp = function handleKeyUp(e) {
    if (e.key === 'ArrowDown') setIndex(index + 1);else if (e.key === 'ArrowUp') setIndex(index - 1);else if (e.key === 'Escape') {
      setMenu(false);
    }
  };

  var handleSubItemClick = function handleSubItemClick(e, subItem) {
    if (props.onChange) props.onChange(subItem);
    setTimeout(function () {
      setMenu(false);
    });
  };

  var getValue = function getValue() {
    if (props.itemKey && !!props.returnObject && !props.childrenKey) return props.value[props.itemKey];else return props.value;
  };

  return /*#__PURE__*/React.createElement(Dropdown, {
    className: strinfigyClassObject(className),
    closeManaged: true,
    contentMaxHeight: props.maxHeight,
    visible: menu,
    dark: props.dark,
    trigger: !props.multiple ? /*#__PURE__*/React.createElement(InputField, {
      dark: props.dark,
      label: props.label ? props.label : '',
      color: props.color ? props.color : 'primary',
      suffix: /*#__PURE__*/React.createElement(Icon, {
        className: "cursor-pointer",
        disabled: props.disabled,
        name: menu ? 'chevron-up' : 'chevron-down',
        onClick: function onClick() {
          return setMenu(true);
        }
      }),
      value: getValue(),
      onKeyUp: handleKeyUp,
      whiteBackground: props.whiteBackground,
      size: props.size,
      borderType: props.borderType,
      prefix: props.prefix,
      disabled: props.disabled,
      onFocus: function onFocus() {
        return !props.disabled ? setMenu(true) : {};
      },
      onBlur: function onBlur() {
        return !props.childrenKey && !props.searchable ? setMenu(false) : {};
      },
      readOnly: true,
      style: {
        width: props.width
      },
      placeholder: props.placeholder
    }) : /*#__PURE__*/React.createElement("div", {
      ref: checkboxesContainer,
      onClick: function onClick() {
        return !props.disabled ? setMenu(true) : {};
      },
      style: {
        width: props.width ? props.width : 100
      },
      className: props.disabled ? 'rui-select__multiple disabled' : 'rui-select__multiple'
    }, !!props.label && /*#__PURE__*/React.createElement("label", {
      className: focus ? "text-".concat(props.color ? props.color : 'primary') : ''
    }, props.label), /*#__PURE__*/React.createElement("div", {
      style: {
        backgroundColor: props.whiteBackground ? '#fff' : ''
      },
      className: strinfigyClassObject(classNameMultiple)
    }, props.prefix ? /*#__PURE__*/React.createElement("span", {
      className: "rui-input-prefix"
    }, props.prefix) : '', selected.length > 0 ? /*#__PURE__*/React.createElement("div", {
      className: "rui-select__multiple-item"
    }, selected.map(function (item, index) {
      return /*#__PURE__*/React.createElement(Tag, {
        key: index,
        tiny: true,
        disabled: props.disabled,
        outlined: props.tagOutlined,
        color: props.tagColor,
        onClick: function onClick(e) {
          return handleItemClick(props.itemKey ? _defineProperty({}, props.itemKey, item) : item);
        },
        visible: isSelected(item),
        className: "ma-1"
      }, item);
    })) : !!props.placeholder && /*#__PURE__*/React.createElement("div", {
      className: "rui-select__multiple-placeholder"
    }, props.placeholder), /*#__PURE__*/React.createElement("span", {
      className: "rui-input-suffix"
    }, /*#__PURE__*/React.createElement(Icon, {
      name: menu ? 'chevron-up' : 'chevron-down'
    }))))
  }, /*#__PURE__*/React.createElement("div", {
    className: "rui-select__menu"
  }, props.searchable && !props.childrenKey ? /*#__PURE__*/React.createElement(InputField, {
    style: {
      width: props.width ? props.width : ''
    },
    dark: props.dark,
    color: props.color ? props.color : 'primary',
    prefix: /*#__PURE__*/React.createElement(Icon, {
      name: "search"
    }),
    value: search,
    autoFocus: true,
    placeholder: props.searchPlaceholder ? props.searchPlaceholder : 'Search',
    onChange: function onChange(e) {
      return setSearch(e.target.value);
    },
    className: "full-width pa-5"
  }) : '', /*#__PURE__*/React.createElement(List, {
    className: "rui-select__list",
    dark: props.dark,
    size: props.size
  }, filteredItems().map(function (item, index) {
    return /*#__PURE__*/React.createElement(List.Item, {
      key: index,
      color: props.color,
      tabIndex: index,
      isActiveItem: getActiveItem(item),
      onClick: function onClick() {
        return handleItemClick(item);
      },
      checkbox: props.multiple,
      controls: !props.multiple && props.childrenKey && /*#__PURE__*/React.createElement(Icon, {
        onClick: function onClick() {
          return handleItemClick(item);
        },
        name: "chevron-next",
        className: "rui-select__next-icon"
      }),
      item: props.itemKey ? item[props.itemKey] : item,
      hover: true
    }, !props.multiple && props.childrenKey && /*#__PURE__*/React.createElement("div", {
      className: "rui-select__submenu"
    }, /*#__PURE__*/React.createElement(List, {
      dark: props.dark,
      size: props.size,
      className: "rui-select__submenu-list"
    }, item[props.childrenKey].map(function (subItem, iterator) {
      return /*#__PURE__*/React.createElement(List.Item, {
        onClick: function onClick(e) {
          return handleSubItemClick(e, subItem);
        },
        isActiveItem: subItem === props.value,
        key: iterator,
        item: subItem,
        hover: true
      });
    }))));
  }))));
};

export default Select;