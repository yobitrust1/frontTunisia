import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState } from 'react';
import { Dropdown, InputField, List, Icon } from '../index';
import { strinfigyClassObject } from '../utils';

var AutoComplete = function AutoComplete(props) {
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      visible = _useState2[0],
      setVisible = _useState2[1];

  var _useState3 = useState(''),
      _useState4 = _slicedToArray(_useState3, 2),
      search = _useState4[0],
      setSearch = _useState4[1];

  var className = {
    btn: 'rui-autocomplete',
    maxHeight: props.contentMaxHeight ? 'max-height' : '',
    color: props.color && props.color !== 'default' ? props.color : 'primary',
    className: props.className ? props.className : ''
  };

  var getItem = function getItem(item, lower) {
    return props.itemKey ? lower ? item[props.itemKey].toLowerCase() : item[props.itemKey] : lower ? item.toLowerCase() : item;
  };

  var filtered = function filtered() {
    if (search) {
      return props.items.filter(function (item) {
        return getItem(item, true).includes(search.toLowerCase());
      });
    } else {
      return [];
    }
  };

  var handleItemClick = function handleItemClick(item) {
    setSearch(item);
    setTimeout(function () {
      setVisible(false);
    });
  };

  var handleClear = function handleClear() {
    if (props.onClear) {
      props.onClear();
      setSearch('');
    }

    setVisible(false);
  };

  var handleSuffix = function handleSuffix() {
    if (props.loading) {
      return /*#__PURE__*/React.createElement(Icon, {
        name: "loading",
        className: "rui-autocomplete__loading loading"
      });
    } else if (!props.loading && props.suffix) {
      return props.suffix;
    } else return null;
  };

  return /*#__PURE__*/React.createElement("div", {
    className: strinfigyClassObject(className),
    style: props.style
  }, /*#__PURE__*/React.createElement(Dropdown, {
    visible: visible,
    width: props.width ? props.width : '',
    closeManaged: true,
    dark: props.dark,
    contentMaxHeight: props.contentMaxHeight,
    trigger: /*#__PURE__*/React.createElement(InputField, {
      color: props.color,
      dark: props.dark,
      disabled: props.disabled || props.loading,
      required: props.required,
      readOnly: props.readOnly,
      lifted: props.lifted,
      borderType: props.borderType,
      uppercase: props.uppercase,
      whiteBackground: props.whiteBackground,
      prefix: props.prefix,
      suffix: handleSuffix(),
      value: search,
      size: props.size,
      clearable: props.clearable,
      onClear: handleClear,
      onFocus: function onFocus() {
        return !props.disabled ? setVisible(true) : {};
      },
      onBlur: function onBlur() {
        return setVisible(false);
      },
      onChange: function onChange(e) {
        return setSearch(e.target.value);
      },
      placeholder: props.placeholder,
      label: props.label,
      hintColor: props.hintColor
    })
  }, /*#__PURE__*/React.createElement(List, {
    dark: props.dark,
    size: props.size,
    header: props.listHeader
  }, filtered().map(function (item, index) {
    return /*#__PURE__*/React.createElement(List.Item, {
      key: index,
      avatar: props.avatarKey,
      avatarSize: props.avatarSize,
      avatarBorderType: props.avatarBorderType,
      icon: props.iconKey ? item[props.iconKey] : null,
      hover: props.hover === false ? false : true,
      onClick: function onClick() {
        handleItemClick(getItem(item));
        if (props.onItemClick) props.onItemClick(item);
      },
      item: getItem(item)
    });
  })), props.footer(filtered().length)));
};

export default AutoComplete;