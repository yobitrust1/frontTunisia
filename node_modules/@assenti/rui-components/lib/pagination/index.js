import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState, useEffect } from 'react';
import { Select } from '../index';
import { ChevronBack, ChevronNext } from '../icon/icons/index';
import { strinfigyClassObject } from '../utils';

var generateMockArr = function generateMockArr(pages, perPage) {
  var length = Math.ceil(pages / perPage);
  if (pages * 2 < perPage) length = 2;
  var arr = [];

  for (var i = 0; i < length; i++) {
    arr.push(i);
  }

  return arr;
};

var Pagination = function Pagination(props) {
  var className = {
    btn: 'rui-pagination',
    size: props.size ? props.size : '',
    borderType: props.borderType ? props.borderType : '',
    dark: props.dark ? 'dark' : '',
    dense: props.dense ? 'dense' : '',
    color: props.color ? props.color : 'primary',
    className: props.className ? props.className : ''
  };
  var itemsCount = props.itemsCount,
      perPage = props.perPage,
      onChange = props.onChange,
      onPerPageSelect = props.onPerPageSelect;

  var getLimit = function getLimit() {
    return Math.ceil(itemsCount / perPage) >= 5 ? 5 : Math.ceil(itemsCount / perPage);
  };

  var _useState = useState(props.current ? props.current : 1),
      _useState2 = _slicedToArray(_useState, 2),
      page = _useState2[0],
      setPage = _useState2[1];

  var _useState3 = useState(generateMockArr(itemsCount, perPage).slice(0, getLimit())),
      _useState4 = _slicedToArray(_useState3, 2),
      activePages = _useState4[0],
      setActivePages = _useState4[1];

  var isPrevAvailable = function isPrevAvailable() {
    return page === 1 ? false : true;
  };

  var isNextAvailable = function isNextAvailable() {
    if (page === itemsCount || props.itemsCount === 0 || page === Math.ceil(itemsCount / perPage)) return false;else return true;
  };

  var handleOnNext = function handleOnNext() {
    if (isNextAvailable()) {
      if (page % getLimit() === 0 && page < generateMockArr(itemsCount, perPage).length) {
        setActivePages(generateMockArr(itemsCount, perPage).slice(page, page + getLimit()));
        setPage(page + 1);
        if (onChange) onChange(page + 1);
      } else if (page < generateMockArr(itemsCount, perPage).length) {
        setPage(page + 1);
        if (onChange) onChange(page + 1);
      }
    }
  };

  var handleOnPrev = function handleOnPrev() {
    if (isPrevAvailable()) {
      if (page > 1 && (page - 1) % getLimit() === 0) {
        setActivePages(generateMockArr(itemsCount, perPage).slice(page - 1 - getLimit(), page - 1));
        setPage(page - 1);
        if (onChange) onChange(page - 1);
      } else if (page > 1) {
        setPage(page - 1);
        if (onChange) onChange(page - 1);
      }
    }
  };

  var handleOnStart = function handleOnStart() {
    setActivePages(generateMockArr(itemsCount, perPage).slice(0, getLimit()));
    setPage(1);
    if (onChange) onChange(1);
  };

  var handleOnEnd = function handleOnEnd() {
    setActivePages(generateMockArr(itemsCount, perPage).slice(generateMockArr(itemsCount, perPage).length - 5, generateMockArr(itemsCount, perPage).length));
    setPage(generateMockArr(itemsCount, perPage).length);
    if (onChange) onChange(generateMockArr(itemsCount, perPage).length);
  };

  var handlePerPageSelect = function handlePerPageSelect(value) {
    if (onPerPageSelect) onPerPageSelect(value);
  };

  useEffect(function () {
    setActivePages(generateMockArr(itemsCount, perPage).slice(0, getLimit()));
  }, [perPage, itemsCount]);
  return /*#__PURE__*/React.createElement("div", {
    className: strinfigyClassObject(className)
  }, /*#__PURE__*/React.createElement("div", {
    className: isPrevAvailable() ? 'rui-pagination-item' : 'rui-pagination-item disabled',
    onClick: handleOnPrev
  }, /*#__PURE__*/React.createElement(ChevronBack, null)), activePages[0] > 4 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "rui-pagination-item",
    onClick: handleOnStart
  }, "1"), /*#__PURE__*/React.createElement("div", {
    className: "rui-pagination-item disabled"
  }, "...")) : null, activePages.map(function (item, index) {
    return /*#__PURE__*/React.createElement("div", {
      key: index,
      className: item + 1 === page ? 'rui-pagination-item active' : 'rui-pagination-item',
      onClick: function onClick() {
        setPage(item + 1);
        if (props.onChange) props.onChange(item + 1);
      }
    }, item + 1);
  }), generateMockArr(itemsCount, perPage).length > 5 && activePages[activePages.length - 1] !== generateMockArr(itemsCount, perPage)[generateMockArr(itemsCount, perPage).length - 1] ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "rui-pagination-item disabled"
  }, "..."), /*#__PURE__*/React.createElement("div", {
    className: "rui-pagination-item",
    onClick: handleOnEnd
  }, generateMockArr(itemsCount, perPage).length)) : null, /*#__PURE__*/React.createElement("div", {
    className: isNextAvailable() ? 'rui-pagination-item' : 'rui-pagination-item disabled',
    onClick: handleOnNext
  }, /*#__PURE__*/React.createElement(ChevronNext, null)), /*#__PURE__*/React.createElement("div", {
    className: "rui-pagination-per-page"
  }, /*#__PURE__*/React.createElement(Select, {
    size: props.size,
    dark: props.dark,
    rounded: props.rounded,
    color: props.color,
    borderType: props.borderType,
    value: "".concat(perPage, " / ").concat(props.perPageText ? props.perPageText : 'page'),
    items: props.perPageVariants ? props.perPageVariants : [10, 20, 50, 100],
    selectedItem: "".concat(perPage, " / ").concat(props.perPageText ? props.perPageText : 'page'),
    onChange: handlePerPageSelect
  })));
};

export default Pagination;