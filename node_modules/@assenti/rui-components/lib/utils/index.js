import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
export var convertToNum = function convertToNum(value) {
  if (/^\d+$/.test(value)) {
    return parseFloat(value);
  } else return value;
};
export var compare = function compare(a, b, key, sortType) {
  if (sortType === 'desc') {
    if (convertToNum(a[key]) < convertToNum(b[key])) return 1;
    if (convertToNum(b[key]) < convertToNum(a[key])) return -1;
    return 0;
  } else if (sortType === 'asc') {
    if (convertToNum(a[key]) > convertToNum(b[key])) return 1;
    if (convertToNum(b[key]) > convertToNum(a[key])) return -1;
    return 0;
  }
};
export var dateMask = function dateMask(date) {
  if (date) {
    var day = date.getDate();
    var month = date.getMonth();
    var year = date.getFullYear();
    var handledDay = day.toString().length < 2 ? "0".concat(day) : day;
    var handledMonth = month.toString().length < 2 ? "0".concat(month + 1) : month + 1;
    return "".concat(handledDay, ".").concat(handledMonth, ".").concat(year);
  } else {
    return '';
  }
};
/**
 * phoneMask function
 * @param {string} phone expects 10 digits length string
 * @param {string} code default: '+7'
 */

export var phoneMask = function phoneMask(phone) {
  var code = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '+7';

  if (phone) {
    return "".concat(code, " (").concat(phone.slice(0, 3), ") ").concat(phone.slice(3, 6), "-").concat(phone.slice(6, 8), "-").concat(phone.slice(8, 10));
  } else {
    return '';
  }
};
export var iinMask = function iinMask(value) {
  if (value) {
    return "".concat(value.slice(0, 3), " ").concat(value.slice(3, 6), " ").concat(value.slice(6, 9), " ").concat(value.slice(9, 12));
  } else {
    return '';
  }
};
export var creditMask = function creditMask(value) {
  if (value) {
    return "".concat(value.slice(0, 4), " ").concat(value.slice(4, 8), " ").concat(value.slice(8, 12), " ").concat(value.slice(12, 16));
  } else {
    return '';
  }
};
export var creditIssueMask = function creditIssueMask(value) {
  if (value) {
    return "".concat(value.slice(0, 2), " / ").concat(value.slice(2, 4));
  } else {
    return '';
  }
};
export var isTwoDatesEqual = function isTwoDatesEqual(date1, date2) {
  var day1 = new Date(date1).getDate();
  var month1 = new Date(date1).getMonth();
  var year1 = new Date(date1).getFullYear();
  var day2 = new Date(date2).getDate();
  var month2 = new Date(date2).getMonth();
  var year2 = new Date(date2).getFullYear();
  return day1 === day2 && month1 === month2 && year1 === year2;
};
/**
 * Brings the number to financial format
 * @param {number} number Required param
 */

export var toFinancial = function toFinancial(number) {
  if (number !== null || number !== undefined) {
    var _Math$abs$toString$sp = Math.abs(number).toString().split('.'),
        _Math$abs$toString$sp2 = _slicedToArray(_Math$abs$toString$sp, 2),
        integer = _Math$abs$toString$sp2[0],
        remain = _Math$abs$toString$sp2[1];

    var result = '';
    var integerToInt = parseInt(integer);

    if (integerToInt > 0 && integerToInt < 1000) {
      result = integer;
    } else if (integerToInt >= 1000 && integerToInt < 10000) {
      result = "".concat(integerToInt.toString().slice(0, 1), " ").concat(integerToInt.toString().slice(1, 4));
    } else if (integerToInt >= 10000 && integerToInt < 100000) {
      result = "".concat(integerToInt.toString().slice(0, 2), " ").concat(integerToInt.toString().slice(2, 5));
    } else if (integerToInt >= 100000 && integerToInt < 1000000) {
      result = "".concat(integerToInt.toString().slice(0, 3), " ").concat(integerToInt.toString().slice(3, 6));
    } else if (integerToInt >= 1000000 && integerToInt < 10000000) {
      result = "".concat(integerToInt.toString().slice(0, 1), " ").concat(integerToInt.toString().slice(1, 4), " ").concat(integerToInt.toString().slice(4, 7));
    } else if (integerToInt >= 10000000 && integerToInt < 100000000) {
      result = "".concat(integerToInt.toString().slice(0, 2), " ").concat(integerToInt.toString().slice(2, 5), " ").concat(integerToInt.toString().slice(5, 8));
    } else if (integerToInt >= 100000000 && integerToInt < 1000000000) {
      result = "".concat(integerToInt.toString().slice(0, 3), " ").concat(integerToInt.toString().slice(3, 6), " ").concat(integerToInt.toString().slice(6, 9));
    }

    return number < 0 ? "- ".concat(result).concat(remain ? '.' + remain.slice(0, 2) : '') : result + "".concat(remain ? '.' + remain.slice(0, 2) : '');
  } else return '';
};
/**
 * Strinfigy Classes Object
 * @param {any} classObject Required param
 */

export var strinfigyClassObject = function strinfigyClassObject(classObject) {
  var result = '';

  for (var key in classObject) {
    if (classObject[key]) result += classObject[key] + ' ';
  }

  return result.trim();
};
/**
 * Sort array by ascending by property or not
 * @param {any[]} items Required param
 * @param {string | undefined} prop Optional param
 */

export var sortListByAsc = function sortListByAsc(items) {
  var prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

  if (prop) {
    return items.sort(function (a, b) {
      if (a[prop] < b[prop]) return -1;
      if (b[prop] < a[prop]) return 1;
      return 0;
    });
  } else {
    return items.sort(function (a, b) {
      if (a < b) return -1;
      if (b < a) return 1;
      return 0;
    });
  }
};
export var getBase64 = function getBase64(file) {
  if (file) {
    return new Promise(function (resolve, reject) {
      var reader = new FileReader();
      reader.readAsDataURL(file);

      reader.onload = function () {
        return resolve(reader.result);
      };

      reader.onerror = function (error) {
        return reject(error);
      };
    });
  }
};